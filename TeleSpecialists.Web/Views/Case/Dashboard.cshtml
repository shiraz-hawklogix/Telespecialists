@using TeleSpecialists.BLL.Helpers;
@using TeleSpecialists.BLL.Extensions;
@using TeleSpecialists.BLL.Model;
@{
    ViewBag.Title = "Dashboard";
    var list = ViewBag.StatusFilter as List<ucl_data>;
    bool isAllowListing = (bool)ViewBag.AllowListing;
    string FacilityAdminMessage = (string)ViewBag.FacilityAdminMessage;
    var tPA_List = ViewBag.tPA_List as IEnumerable<SelectListItem>;
    var userRegionalMD = User.IsInRole(UserRoles.RegionalMedicalDirector.ToDescription());
}

@if (ViewBag.Message != "" && ViewBag.Message != null)
{
    <div class="alert alert-dismissible @((bool)ViewBag.Error ? "alert-danger" : "alert-success")" id="autoclose">
        <button type="button" class="close" data-dismiss="alert">&times;</button>
        <strong>@((bool)ViewBag.Error ? "Error!" : "Success!")</strong> @ViewBag.Message
    </div>
}

@if (isAllowListing)
{
    { Html.RenderAction("_AdvanceSearch", new { @source = PageSource.Dashboard, @showFollowUp = false }); }
    <div class="row">
        <div class="col-lg-12 col-xl-12 col-sm-12 col-md-12">
            @{
                var hideToolTip = User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) || User.IsInRole(UserRoles.FacilityPhysician.ToDescription()) || User.IsInRole(UserRoles.Physician.ToDescription()) ? "d-none" : "";
            }
            <div class="border @hideToolTip col-xl-6 col-lg-6 col-md-6 col-sm-6" style="float:right" id="divToolTip">
                <div class="text-danger"><strong>*Tool Tip - STATS</strong></div>
                <div>
                    <div>Yellow = If rotating more than 2 physicians</div>
                    <div>Pink = Start time to callback time is greater than 15 minutes</div>
                    <div>Purple = If both yellow/pink are true</div>
                </div>
            </div>
            <div class="border @hideToolTip col-xl-6 col-lg-6 col-md-6 col-sm-6" style="float:right" id="divToolTip">
                <div class="text-danger"><strong>*Tool Tip - Stroke Alerts</strong></div>
                <div>
                    <div>Yellow = If rotating more than 2 physicians</div>
                    <div>Pink = Start time to Login time is greater than 10 minutes</div>
                    <div>Purple = If both yellow/pink are true</div>
                </div>
            </div>

        </div>
    </div>
    <div class="row">
        <div class="col-lg-12 col-xl-12 col-sm-12 col-md-12">
            <div>
                <form id="frmSearch" method="post" class="row">
                    <div class="form-row float-right col-lg-12 justify-content-end">
                        <div class="form-group d-none"></div>
                        <div class="form-group d-lg-inline-block d-none"></div>
                        <div class="form-group col-xl-2 col-lg-3 col-md-6 col-sm-6 @(User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) ? "d-none" : "")">
                            <label class="bold">Status</label>
                            <div id="divStatusFilter">
                                <select id="statusFilter" class="form-control active" multiple="multiple">
                                    @foreach (var item in list)
                                    {
                                        <option value="@item.ucd_key">@item.ucd_title</option>
                                    }
                                </select>
                            </div>
                        </div>
                        <div class="form-group col-xl-2 col-lg-3 col-md-6 col-sm-6">
                            <label class="bold">Time Frame</label>
                            <select id="dateFilter" class="form-control">
                                <option value="-1">Any</option>
                                <option value="Today">Today</option>
                                <option value="Yesterday">Yesterday</option>
                                <option value="Last48Hours">Last 48 Hours</option>
                                <option value="LastSevenDays">Last 7 Days</option>
                                <option value="Last30Days">Last 30 Days</option>
                                <option value="PreviousWeek">Previous Week</option>
                                <option value="PreviousMonth">Previous Month</option>
                                <option value="MonthToDate">Month to Date</option>
                                <option value="SpecificDate">Specific Date</option>
                                <option value="DateRange">Date Range</option>
                            </select>
                        </div>
                        @if (User.IsInRole(UserRoles.Navigator.ToDescription()) || User.IsInRole(UserRoles.Administrator.ToDescription()) || User.IsInRole(UserRoles.SuperAdmin.ToDescription()) || User.IsInRole(UserRoles.RegionalMedicalDirector.ToDescription()) || User.IsInRole(UserRoles.RRCManager.ToDescription()) || User.IsInRole(UserRoles.RRCDirector.ToDescription()))
                        {
                            <div class="form-group col-xl-1 col-lg-2 col-md-6 col-sm-6">
                                <label class="bold">Flag</label>
                                <select id="flagFilter" class="form-control">
                                    <option value="">All</option>
                                    <option value="true">Yes</option>
                                    <option value="false">No</option>
                                </select>
                            </div>
                        }


                        <div class="form-group col-xl-2 col-lg-3 col-md-6 col-sm-6" id="divCallTypeFilter">
                            <label class="bold">Call Type</label>
                            @Html.DropDownList("CallType", ViewBag.CallType as List<SelectListItem>, new { @class = "form-control", @multiple = "multiple" })

                        </div>

                        <div class="form-group col-xl-1 col-lg-2 col-md-6 col-sm-6">
                            <label class="bold">tPA</label>
                            @Html.DropDownList("tPA_List", tPA_List, new { @class = "form-control", @multiple = "multiple" })

                        </div>

                        <div class="form-group col-xl-2 col-lg-3 col-md-6 col-sm-6" id="divCallerSourceFilter">
                            <label class="bold">Caller Source</label>
                            @Html.DropDownList("CallerSource", ViewBag.CallerSource as List<SelectListItem>, new { @class = "form-control", @multiple = "multiple" })

                        </div>


                        <div class="form-group col-xl-2 col-lg-3 col-md-6 col-sm-6">
                            <label class="bold">Keyword Search</label>
                            <input type="search" id="searchBox" class="k-textbox form-control-sm " style="width: 100%;" />
                        </div>
                        <div class="form-group col-xl-8 col-lg-6 col-md-6 col-sm-6" id="divDateRange" style="display:none;">
                            <div class="form-row">
                                <div class="d-none d-xl-block col-xl-6"></div>
                                <div class="col-xl-3 col-lg-6 col-md-6">
                                    <strong>Start Date</strong>
                                    <input type="text" id="txtStartDate" name="txtStartDate" class="form-control datepicker" />
                                    <span class="text-danger field-validation-error position-absolute" id="txtStartDateError"
                                          style="display:none" data-valmsg-for="txtStartDate" data-valmsg-replace="true">
                                        <span id="txtStartDate-error" class=""></span>
                                    </span>
                                </div>
                                <div class="col-xl-3 col-lg-6 col-md-6">
                                    <strong>End Date</strong>
                                    <input type="text" id="txtEndDate" name="txtEndDate" class="form-control datepicker" />
                                </div>
                            </div>
                        </div>
                        <div class="form-group col-xl-8 col-lg-6 col-md-6 col-sm-6" id="divSpecificDate" style="display:none;">
                            <div class="form-row">
                                <div class="d-none d-xl-block col-xl-9"></div>
                                <div class="col-xl-3 col-lg-12 col-md-12">
                                    <label class="bold">Date</label>
                                    <input type="text" id="txtSpecificDate" name="txtSpecificDate" class="form-control datepicker" style="height: auto;" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="form-row float-right col-lg-12">
                        <div class="form-group filter-button-group float-right col-lg-12">
                            <input class="btn btn-dark margin-b-5" type="button" id="btnSearch" value="Search" />
                            <a class="btn btn-dark margin-b-5 " href="javascript:;" id="resetSearch" style="display:none;">Clear Search</a>
                            <a class="btn btn-dark margin-b-5 @(User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) ? "d-none" : "")" href="javascript:;" data-toggle="modal" data-target="#caseAdvanceSearch" id="caseAdvanceSearch">Advanced</a>
                            <a class="btn btn-dark margin-b-5 " href="javascript:;" id="btnExportCases">Export</a>
                        </div>
                    </div>
                </form>
            </div>
        </div>
    </div>
    <div class="pt-1 customGridHeader" id="DashboardGridContainer">
        <div id="kendoDataGrid">
        </div>
    </div>

    <script type="text/javascript">
      var source = "@(PageSource.Dashboard.ToInt())";
    var exportPostData = null;
    var advanceSearchformData = [];
    var userInitialList = [];
    var userInitialValue = "";
    var userTypeValue = "";

    clearAutoSaveInterval();
        $(document).ready(function () {

            document.title = $("#title-prefix").val() + '@ViewBag.Title';
            refillFilters.applyFilters = 1;
            refillFilters.resetSearch = false;
            generateStatusFilter();
            generateUserInitialFilter();
            generateUserTypeFilter();
            generateEAlertFilter();
            isUserInitial = false;
            isUserType = false;

            $('#CallType').multiselect({
                columns: 1,
                placeholder: 'Select Call Type',
                search: false,
                selectAll: true,
                onOptionClick: function () {
                    $("#btnSearch").click();
                },
                onSelectAll: function () {
                    performSearchOnCases();
                }
            });

            $('#CallerSource').multiselect({
                columns: 1,
                placeholder: 'Select Caller Source',
                search: false,
                selectAll: true,
                onOptionClick: function () {
                    $("#btnSearch").click();
                },
                onSelectAll: function () {
                    performSearchOnCases();
                }
            });

            $('#tPA_List').multiselect({
                columns: 1,
                placeholder: 'Select tPA',
                search: false,
                selectAll: true,
            });

            //tPA_List

            localStorage.setItem('Dashboard.RecPerPage', 20);

            $("#dateFilter").val('Last48Hours');


            $("#flagFilter").off("change").change(function () {
                $("#btnSearch").click();
            });

            $("#kendoDataGrid").kendoGrid({
                dataSource: {
                    transport: {
                        read: {
                            url: '@Url.Action("GetAllForDashboard")',
                            contentType: "application/json",
                            type: "POST"
                        },
                        parameterMap: function (options) {
                            
                            options = KendoKeepState("Dashboard", options, true);
                            if ((options.filter !== undefined && options.filter.filters !== undefined) == false) {
                                if (options.filter === undefined)
                                    options.filter = {};
                                if (options.filter.filters === undefined)
                                    options.filter.filters = [];
                                if (options.filter.logic === undefined)
                                    options.filter.logic = "and";
                                options.filter.filters.push({ field: "date_filter", operator: "eq", "value": $("#dateFilter").val() });
                                options = KendoKeepState("Dashboard", options, true);
                            }
                            exportPostData = options;
                            return kendo.stringify(options);
                        }
                    },
                    mobile: "phone",
                    schema: {
                        data: "Data",
                        total: "Total"
                    },
                    page: KendoGet("Dashboard", "page"),
                    pageSize: GetKendoPageSize("Dashboard", "RecPerPage", true),
                    serverPaging: true,
                    serverFiltering: true,
                    serverSorting: true
                },
                dataBound: function (e) {

                    formatPhysicianInitials("#kendoDataGrid", 14);

                    applyColors();
                    //PhysiciansColor();
                    if (refillFilters.applyFilters != 0) {
                        refillFilters();
                    }
                    refreshData();
                    this.autoFitColumn('Actions');
                    //get All records
                    SetKendoTotalCount("Dashboard", $('#kendoDataGrid').data("kendoGrid").dataSource.total());
                    // Adjust dropdown horizental allignment in case of five-9 sidebae expanded.
                    $('[data-role="dropdownlist"]').each(function () {
                        var kendoDropDown = $(this).data("kendoDropDownList");
                        if (kendoDropDown)
                            kendoDropDown.bind("open", onDropdDownOpen);
                    });
                },
                //selectable: true,
                filterable: false,
                sortable: true,
                scrollable: true,
                resizable: true,
                pageable: {
                    refresh: true,
                    pageSizes: [10, 20, 30, 40, 50, 'All'],
                    buttonCount: 5
                },

                columns: [
                    { hidden: true, field: "cas_key" },
                    {
                        title: "<b>Action</b>", width: '80px',
                        template: "<a class='btn btn-dark btn-sm py-1 temp loadLinkAsync' title='View Case' href='@Url.Action("Edit", "Case")?id=#=cas_key#&isReadOnly=#= true#&redirectUrl=/Case/Dashboard'>View</a>"
                    },
                    { hidden: true, field: "cas_status_assign_date" },
                    { hidden: true, field: "cas_cst_key" },
                    { hidden: true, field: "cas_case_number", title: "Case Number" },
                    
                    {
                        title: "<b>Flag</b>", width: '55px', hidden: @(User.IsInRole(UserRoles.Navigator.ToDescription()) || User.IsInRole(UserRoles.Administrator.ToDescription()) || User.IsInRole(UserRoles.SuperAdmin.ToDescription()) || User.IsInRole(UserRoles.RegionalMedicalDirector.ToDescription()) || User.IsInRole(UserRoles.RRCManager.ToDescription()) || User.IsInRole(UserRoles.RRCDirector.ToDescription()) ? "false" : "true"),
                        template: "#= setFlagged(kendo.toString(cas_is_flagged), kendo.toString(cas_key)) #"
                    },                                 
                    { field: "cas_response_ts_notification", title: "Start Time", width: '135px' },
                    { field: "cas_metric_stamp_time_est", title: "Stamp Time", width: '135px' },

                    { field: "callType", width: 120, title: "Call Type" },
                    { field: "callerSource", width: 120, title: "Caller Source" },     

                    { field: "ctp_name", title: "Type", width: '155px', template: "#= checkEAlertTypeCase(kendo.toString(ctp_name), kendo.toString(cas_is_ealert)) #" },
                    { field: "fac_name", title: "Facility", width: '200px', attributes: { "class": "case-grid-facitlityName" } },
                    { field: "cas_patient", title: "Patient Name", width: '135px' },
                    {
                        field: "phy_name", title: "Physician", width: '100px',
                        attributes: { "class": "dash-case-grid-physician wrapWord " },
                        hidden: @(User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) || User.IsInRole(UserRoles.Physician.ToDescription()) ? "true" : "false"),
                    },
                    { field: "ResponseTime", title: "TS Response Time", width: '150px', attributes: { "class": "case-grid-response-time" } },
                    { field: "ArrivalToNeedleTime", title: "Arrival to Needle Time", width: '150px', attributes: { "class": "case-grid-needle-time" } },
                    { hidden: true, field: "CallBackResponseTime", title: "Callback To TS-Response Time", width: '150px', attributes: { "class": "case-grid-callbackresponse-time" } },
                    { field: "cst_name", title: "Status", width: '100px', hidden: @(User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) ? "true" : "false"), },
                    { field: "TPACandidate", title: "tPA", width: '50px' },
                    { field: "Navigator", title: "Navigator", width: '120px', hidden: @(User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) ? "true" : "false"), },
                    { field: "StartToStamp", title: "Start to Stamp", width: '135px' },
                    { field: "StartToAccept", title: "Start to Accepted", width: '135px' },   
                    { field: "UserInitial", hidden: true },
                    { field: "psl_status_color", hidden: true },
                    { field: "psl_status_name", hidden: true },
                ]
            });

            $("#kendoDataGrid").kendoTooltip({
                filter: "td:nth-child(6)", //this filter selects the second column's cells
                position: "right",
                content: function (e) {
                    var isFlagged = $(e.target).find("img").data("flagged");
                    if (isFlagged) {
                        return "<div style='color: white;'><span>Click to turn off flag.</span></div>";
                    }
                    else {
                        return "<div style='color: white;'><span>Click to turn on flag.</span></div>";
                    }
                }
            }).data("kendoTooltip");

            $("#btnSearch").off("click").click(function () {
                performSearchOnCases();
            });

            $(".datepicker").kendoDatePicker({
                open: function (e) {
                    onDatePickerOpen(e);
                }
            });

            $("#dateFilter").unbind("change").change(function () {
                $("#divDateRange,#divSpecificDate").hide();
                var selectedValue = $(this).val();
                if (selectedValue == "SpecificDate") {
                    $("#divSpecificDate").show();
                }
                else if (selectedValue == "DateRange") {
                    $("#divDateRange").show();
                }
                else {
                    $("#btnSearch").click();
                }
            });

            // frmSearch
            $("#searchBox").keyup(function (event) {
                if (event.keyCode == 13) {
                    $("#btnSearch").click();
                }
            });

            $("#userInitialFilter").change(function () {
                isUserInitial = true;
            });

            $("#userTypeFilter").change(function () {
                isUserType = true;
            });

            $("#frmAdvanceSearch").off("submit").submit(function (e) {
                e.preventDefault();

                advanceSearchformData = $("#frmAdvanceSearch").find("input:text,select").serializeArray();
                if (isUserInitial)
                    userInitialValue = $("#userInitialFilter").val().toString();

                if (isUserType)
                    userTypeValue = $("#userTypeFilter").val().toString();

                window.setTimeout(function () {
                    $("#caseAdvanceSearch").modal("hide");
                    $("#btnSearch").click();
                }, 100);
            });

            $("#btnExportCases").off("click").click(function () {
                var url = "@Url.Action("ExportDashboard")";
                $.ajax({
                    url: url,
                    type: "POST",
                    data: JSON.stringify(exportPostData),
                    dataType: "json",
                    contentType: "application/json; charset=utf-8",
                    success: function (response) {
                        if (response.success) {
                            window.location.href = response.exportedFileUrl;
                        }
                    }
                });
            });

            $("#resetSearch").off("click").click(function (e) {
                e.preventDefault();
                $("#frmAdvanceSearch").trigger('reset');
                advanceSearchformData = [];
                $("#userInitialFilter").val("");
                $("#userTypeFilter").val("");
                $("#eAlertFilter").val("");
                $("#frmSearch").trigger('reset');
                $("#divStatusFilter").find(".ms-options-wrap").find("button>span").html("Select Status");
                $("#divuserTypeFilter").find(".ms-options-wrap").find("button>span").html("Select Type");
                $("#diveAlertFilter").find(".ms-options-wrap").find("button>span").html("eAlert");
                // Ticket 560
                $("#divCallerSourceFilter").find(".ms-options-wrap").find("button>span").html("Select Call Type");
                $("#divCallTypeFilter").find(".ms-options-wrap").find("button>span").html("Select Caller Source");
                //
                $("#divDateRange,#divSpecificDate").hide();

                localStorage.clear();

                $("#dateFilter").val('Last48Hours');
                $("#divuserInitialFilter").find(".ms-options-wrap").find("button>span").html("Select Physician");
                $("#btnSearch").click();
                $("#resetSearch").hide();
                refillFilters.applyFilters = 1;
                refillFilters.resetSearch = true;
            });

        });


        $("#DashboardGridContainer .k-link").off("click").click(function () {
            StopCaseListingTimer();
        })

        function StopCaseListingTimer() {
            if (refreshData.timeout != undefined)
                window.clearTimeout(refreshData.timeout);
        }

        function generateEAlertFilter() {
            $('#eAlertFilter').multiselect({
                columns: 1,
                placeholder: 'eAlert',
                search: false,
                searchOptions: {
                    'default': 'eAlert'
                },
                selectAll: true,
            });
        }

        function generateStatusFilter() {
            $('#statusFilter').multiselect({
                columns: 1,
                placeholder: 'Select Status',
                search: true,
                searchOptions: {
                    'default': 'Search Status'
                },
                selectAll: true,
                onOptionClick: function () {
                    $("#btnSearch").click();
                },
                onSelectAll: function () {
                    performSearchOnCases();
                }
            });
        }

        function generateUserInitialFilter() {
            $('#userInitialFilter').multiselect({
                columns: 1,
                placeholder: 'Select Physician',
                search: false,
                searchOptions: {
                    'default': 'Search user initials'
                },
                selectAll: true,
            });
        }

        function generateUserTypeFilter() {
            $('#userTypeFilter').multiselect({
                columns: 1,
                placeholder: 'Select Type',
                search: false,
                searchOptions: {
                    'default': 'Search user type'
                },
                selectAll: true,
            });
        }

        function validateForm() {
            var selectedOption = $("#dateFilter").val();
            $("#txtStartDateError").hide();
            if (selectedOption == "DateRange") {
                var start_date = $("#txtStartDate").val();
                var end_date = $("#txtEndDate").val();
                if (start_date != "" && end_date != "") {
                    var duration = moment.duration(moment(end_date).diff(new Date(start_date)));
                    if (duration.asMinutes() < 0) {
                        $("#txtStartDateError").html("Start Date must be less then End Date");
                        $("#txtStartDateError").show();
                        return false;
                    }
                }
            }
            return true;
        }

        function performSearchOnCases() {
            if (!validateForm())
                return;

            var filters = [];

            var selectedValue = $("#dateFilter").val();
            if (selectedValue == "SpecificDate") {
                if ($("#txtSpecificDate").val() != "") {
                    filters.push({
                        field: "specific_date",
                        operator: "eq",
                        value: $("#txtSpecificDate").val()
                    });
                }
            }
            else if (selectedValue == "DateRange") {
                if ($("#txtStartDate").val() != "") {
                    filters.push({
                        field: "start_date",
                        operator: "eq",
                        value: $("#txtStartDate").val()
                    });
                }

                if ($("#txtEndDate").val() != "") {
                    filters.push({
                        field: "end_date",
                        operator: "eq",
                        value: $("#txtEndDate").val()
                    });
                }
            }
            filters.push({
                field: "date_filter",
                operator: "eq",
                value: selectedValue
            });

            var searchValue = $('#searchBox').val();

            if (searchValue != "") {
                filters.push({
                    field: "search_text",
                    operator: "eq",
                    value: searchValue
                });
            }
            var statusFilter = $("#statusFilter").val().toString();
            if (statusFilter !== "") {
                filters.push({
                    field: "cas_status",
                    operator: "eq",
                    value: statusFilter
                });
            }


            var flagValue = $.trim($("#flagFilter").val());
            if (flagValue != undefined && flagValue != null && flagValue != "") {
                filters.push({
                    field: "cas_is_flagged",
                    operator: "eq",
                    value: flagValue + "-" + source
                });
            }

            // eAlert Check
            var eAlert = $.trim($("#eAlertFilter").val());
            if (eAlert) {
                filters.push({
                    field: "cas_is_ealert",
                    operator: "eq",
                    value: eAlert
                });
            }

            var CallerSource = $.trim($("#CallerSource").val());
            if (CallerSource != "") {

                    filters.push({
                        field: "cas_callersource_filter",
                        operator: "eq",
                        value: CallerSource
                    });
            }


            var CallType = $.trim($("#CallType").val());

            if (CallType != "") {
                        filters.push({
                            field: "cas_callertype_filter",
                            operator: "eq",
                            value: CallType
                        });
            }
             var tpaFilter = $.trim($("#tPA_List").val());
            if (tpaFilter != "") {
                filters.push({
                    field: "cas_metric_tpa_consult_filter",
                    operator: "eq",
                    value: tpaFilter
                });
            }



            // advance search user intials
            if (userInitialValue != "") {
                var valueUserInit = $("#userInitialFilter").val().toString();
                if (valueUserInit && ($("#userInitialFilter option:selected").length != $("#userInitialFilter option").length)) {
                    filters.push({
                        field: "cas_history_physician_initial_cal",
                        operator: "eq",
                        value: valueUserInit
                    });
                }
            }
            // advance search user type
            if (userTypeValue != "") {
                var valueUserType = $("#userTypeFilter").val().toString();
                if (valueUserType && ($("#userTypeFilter option:selected").length != $("#userTypeFilter option").length)) {
                    filters.push({
                        field: "multi_cas_ctp_key", //cas_ctp_key
                        operator: "eq",
                        value: valueUserType
                    });
                }
            }
            // advance search
            $.each(advanceSearchformData, function (index, formElement) {
                if ($.trim(formElement.value) != "" && formElement.value != undefined) {
                    if (formElement.value != "") {
                        if (formElement.name.indexOf("advcmp") != -1) {
                            var field = formElement.name;
                            var operator = formElement.value;
                            var value = $("[data-parent='" + field + "']").val();

                            if ($.trim(field) != "" && $.trim(value) != "") {
                                filters.push({
                                    field: formElement.name.replace("advcmp_","complex_"),
                                    operator: operator,
                                    value: value
                                });
                            }
                        }
                        else {
                            filters.push({
                                field: "advance_" + formElement.name,
                                operator: "eq",
                                value: formElement.value
                                });
                        }
                    }
                }
            });
            // Setting the filter of the Grid
            $("#kendoDataGrid").data("kendoGrid").dataSource.filter({
                logic: "or",
                filters: filters
            });
            $("#resetSearch").show();
        }

        function applyColors() {
            
            $("#kendoDataGrid tr").each(function (index, element) {
                
                var row = $(element);
                var open = caseStatusEnum.Open;
                var waiting_to_accept = caseStatusEnum.WaitingToAccept;
                var defaultTimeZoneOffset = @Functions.GetTimeZoneOffset(TeleSpecialists.BLL.Settings.DefaultTimeZone);
                var status = row.find("td:nth-child(3)").text().toInt();

                if (status == open || status == waiting_to_accept) {
                    var currentDateTime = moment(moment().utcOffset(defaultTimeZoneOffset, false).format("YYYY-MM-DD HH:mm:ss"));
                    var cas_status_assign_date = moment(row.find("td:nth-child(2)").text());
                    var duration = moment.duration(currentDateTime.diff(cas_status_assign_date.format("YYYY-MM-DD HH:mm:ss")));
                    if ((duration.asMinutes() >= 6 && duration.asMinutes() < 8 && status == waiting_to_accept)) {
                        row.children("td").addClass("text-warning font-weight-bold");
                    }
                    else if ((duration.asMinutes() >= 3 && status == open) || (duration.asMinutes() >= 8 && status == waiting_to_accept)) {
                        row.children("td").addClass("text-danger font-weight-bold");
                    }
                }

                //////////////////////////////////////////////////////////////
                // TCARE-406

                var physician = row.find(".dash-case-grid-physician").text();
                var showPurple = false;

                if (physician != undefined && physician != '') {
                    var phyCount = physician.split('/').length;

                    if (phyCount > 2) {
                        row.children("td").addClass("text-orange font-weight-bold");
                        showPurple = true;
                    }
                }
                
                var CaseType = row.find("td:nth-child(11)").text();
                if (CaseType.trim() == "Stroke Alert") {
                    var respTime = row.find(".case-grid-response-time").text();
                    if (respTime != undefined && respTime != '') {
                        var respTimeArray = respTime.split(':');
                        var hrs = parseInt(respTimeArray[0]);
                        var mins = parseInt(respTimeArray[1]);
                        var secs = 0;
                        if (respTimeArray.length > 2) {
                            secs = parseInt(respTimeArray[2]);
                            if (secs > 0)
                                mins = mins + (secs / 60);
                        }

                        if (hrs > 0 || mins > 10.0) {
                            row.children("td").removeClass("text-orange font-weight-bold");

                            if (showPurple) {
                                row.children("td").addClass("text-purple font-weight-bold");
                            } else {
                                row.children("td").addClass("text-pink font-weight-bold");
                            }
                        }
                    }

                } else if (CaseType.trim() == "STAT Consult") {
                    var callback = row.find(".case-grid-callbackresponse-time").text();
                    if (callback != undefined && callback != '') {
                        var callrespTimeArray = callback.split(':');
                        var hrs = parseInt(callrespTimeArray[0]);
                        var mins = parseInt(callrespTimeArray[1]);
                        var secs = 0;
                        if (callrespTimeArray.length > 2) {
                            secs = parseInt(callrespTimeArray[2]);
                            if (secs > 0)
                                mins = mins + (secs / 60);
                        }

                        if (hrs > 0 || mins > 15.0) {
                            row.children("td").removeClass("text-orange font-weight-bold");

                            if (showPurple) {
                                row.children("td").addClass("text-purple font-weight-bold");
                            } else {
                                row.children("td").addClass("text-pink font-weight-bold");
                            }
                        }
                    }
                }
                
                var userinitial = row.find("td:nth-child(22)").text();
                var usercolor = row.find("td:nth-child(23)").text();
                var userstatus = row.find("td:nth-child(24)").text();
                if (userinitial != "" && usercolor != "" && userstatus != "") {
                    var userinitials = userinitial.split('/');
                    var usercolors = usercolor.split('/');
                    var userstatuss = userstatus.split('/');
                    var data = "<div class='physicianstatusdiv'>";
                    for (var i = 0; i < userinitials.length; i++) {
                        if (userstatuss[i] == undefined)
                        {
                            userstatuss[i] = "Waiting to Accept";
                        }
                        if (usercolors[i] == undefined)
                        {
                            usercolors[i] = "Black";
                        }
                        data += "<span title='" + userstatuss[i] + "' style='color: " + usercolors[i] + ";font-weight:bold;'>" + userinitials[i] + "</span>/";
                    }
                    var html = data.substring(0, data.length - 1);
                    html += "</div>";
                    //row.find('.dash-case-grid-physician .physicianstatusdiv').empty();
                    row.find('.dash-case-grid-physician').empty();
                    row.children('.dash-case-grid-physician').append(html);
                }
                
                //////////////////////////////////////////////////////////////

            });

            if (applyColors.To != undefined)
                window.clearTimeout(applyColors.To);

            applyColors.To = window.setTimeout(applyColors, 2000);
        }

        function PhysiciansColor() {
            $("#kendoDataGrid tr").each(function (index, element) {
                debugger
                var row = $(element);
                var cas_key = parseInt(row.find("td:nth-child(1)").text());
                var physician = row.find(".dash-case-grid-physician").text();
                //var count = 0;
                
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("PhysicianColors", "Reports")',
                    dataType: 'json',
                    data: { cas_key: cas_key, physician: physician },
                    error: function (error) {

                    },
                    success: function (data) {
                        debugger
                        row.find('.dash-case-grid-physician .physicianstatusdiv').empty();
                        row.children('.dash-case-grid-physician').append(data);
                        //row.children("td:nth-child(14)").append(data);
                        //count++;
                    }

                });
            });
        }

        function refreshData() {
            var currentUrl = $("#hdnCurrentUrl").val().toLowerCase();
            if (currentUrl.indexOf("/case") > -1 || currentUrl.indexOf("/case/index") > -1) {

                if (refreshData.timeout != undefined)
                    window.clearTimeout(refreshData.timeout);

                refreshData.timeout = window.setTimeout(function () {
                    $("#hdnDisableLoader").val("1");
                    var grid = $('#kendoDataGrid').data("kendoGrid");
                    if (grid != undefined)
                        grid.dataSource.read();
                }, 10000);
            }
        }

        function isDefaultFiltersSelected() {
            var defaultSelected = true;
            if ($("#divStatusFilter").find(".ms-options-wrap").find("button>span").html() != "Select Status") { defaultSelected = false; }
            if ($("#dateFilter").val() != "Last48Hours") { defaultSelected = false; }
            if ($("#searchBox").val() != "") { defaultSelected = false; }

            return defaultSelected;
        }

        function refillFilters() {
            if (exportPostData === undefined) { return; }
            if (exportPostData.filter === undefined) { return; }
            if (exportPostData.filter.filters === undefined) { return; }

            $.each(exportPostData.filter.filters, function (index, currentFilter) {
                try {
                    switch (currentFilter.field) {
                        case 'cas_status':

                            $.each($('#divStatusFilter input:checkbox'), function () {
                                $(this).prop('checked', false);
                                $(this).parents('li').removeClass('selected');

                                // multiple values will be comma separated
                                var listOfValues = currentFilter.value.split(',');

                                if ($.inArray($(this).val(), listOfValues) >= 0) {
                                    $(this).prop('checked', true);
                                    $(this).parents('li').addClass('selected');
                                }
                            });

                            var selectedStatus = [];

                            $.each($('#statusFilter option'), function () {
                                $(this).removeAttr('selected');

                                // multiple values will be comma separated
                                var listOfValues = currentFilter.value.split(',');

                                if ($.inArray($(this).val(), listOfValues) >= 0) {
                                    $(this).attr('selected', true);
                                    selectedStatus.push($(this).text());
                                }
                            });

                            if ($('#statusFilter option').length != $('#statusFilter option:selected').length) {
                                if (selectedStatus.length > 0) {
                                    var strSelectedStatus = selectedStatus.join(', ');
                                    $("#divStatusFilter").find(".ms-options-wrap").find("button>span").html(strSelectedStatus);
                                    $("#divStatusFilter").find(".ms-options-wrap").find(".ms-selectall").html("select all");
                                }
                            }

                            break;
                        case 'search_text':
                            $('#searchBox').val(currentFilter.value)
                            break;

                        case 'date_filter':
                            $('#dateFilter').val(currentFilter.value)

                            if (currentFilter.value == "SpecificDate") {
                                $("#divSpecificDate").show();
                            }
                            else if (currentFilter.value == "DateRange") {
                                $("#divDateRange").show();
                            }
                            break;
                        case 'specific_date':
                            $("#divSpecificDate").show();
                            $('#txtSpecificDate').val(currentFilter.value)
                            break;
                        case 'start_date':
                            $('#txtStartDate').val(currentFilter.value)
                            break;
                        case 'end_date':
                            $('#txtEndDate').val(currentFilter.value)
                            break;
                        case 'advance_cas_case_number':
                            $('#cas_case_number').val(currentFilter.value)
                            break;
                        case 'advance_cas_ctp_key':
                            $('#cas_ctp_key').val(currentFilter.value)
                            break;
                        case 'advance_cas_patient':
                            $('#cas_patient').val(currentFilter.value)
                            break;
                        case 'advance_cas_fac_key':
                            $('#cas_fac_key').val(currentFilter.value)
                            break;
                        case 'cas_is_flagged':
                            $("#flagFilter").val(currentFilter.value)
                            break;
                    }

                    if (!isDefaultFiltersSelected() && !refillFilters.resetSearch) {
                        $("#resetSearch").show();
                    }
                    else {
                        $("#dateFilter").val('Last48Hours');
                    }
                } catch (e) { }
            });

            refillFilters.applyFilters = 0;
            refillFilters.resetSearch = false;
        }

        function checkEAlertTypeCase(type, isEAlertCase) {
            if (isEAlertCase) {
                var html = '<div class="float-left sm-dot-warning"><img src="/Content/images/iconfinder_warning.png" alt="eAlert" class="warning-alert-icon"/></div> ';
                html += '<div class="float-left pl-2">' + type + '<span></span></div>'
                return html;
            }
            else {
                return type;
            }
        }

        function setFlagged(isEAlertFlagged, cas_key) {
            if (isEAlertFlagged) {
                return '<div id=flag-' + cas_key + '><img width="32" Height="32" src="/Content/images/red-flag-filled-48.png" alt="Yes"  data-flagged="true" data-caseKey=' + cas_key + ' onClick="chagneFlag(this)"/></div>';
            }
            else {
                return '<div id=flag-' + cas_key + '><img width="32" Height="32" src="/Content/images/icons8-empty-flag-48.png" alt="No" data-flagged="false" data-caseKey=' + cas_key + ' onClick="chagneFlag(this)" /></div>';
            }
        }

        function chagneFlag(el) {
            var caseKey = $(el).attr("data-casekey");
            var isFlagged = $(el).attr("data-flagged");


            if (caseKey != null && caseKey != undefined && caseKey != "") {
                if (isFlagged != null && isFlagged != undefined && isFlagged != "") {
                    var url = "/Case/UpdateCaseFlag?caskey=" + caseKey + "&isFlagged=" + isFlagged + "&source=" + source;
                    $.post(url, function (response) {
                        if (response.success) {
                            if (isFlagged == true) {
                                $("#flag-" + caseKey).html("");
                                $("#flag-" + caseKey).html('<img width="32" Height="32" src="/Content/images/icons8-empty-flag-48.png" alt="No" data-flagged="false" data-caseKey=' + caseKey + ' onClick="chagneFlag(this)" />');
                            }
                            else {
                                $("#flag-" + caseKey).html("");
                                $("#flag-" + caseKey).html('<img width="32" Height="32" src="/Content/images/red-flag-filled-48.png" alt="Yes"  data-flagged="true" data-caseKey=' + caseKey + ' onClick="chagneFlag(this)"/>');
                            }
                        }
                        else {
                            $(".k-edit-form-container, .km-scroll-container").find("#validationSummary").empty().showBSDangerAlert("", "Error! Please try again.");
                        }
                    });
                }
            }
        }
    </script>
}
else
{
    <div class="col-12  dashboard-indicators p-2">
        <label class="font-weight-normal">@FacilityAdminMessage</label>
    </div>
}








