@using TeleSpecialists.BLL.Extensions;
@using TeleSpecialists.BLL.Helpers;
@using TeleSpecialists.BLL.Model;
@model TeleSpecialists.BLL.Model.@case
@{
    var AcuteISchemicStrokeList = Enum.GetValues(typeof(AcuteISchemicStroke)).Cast<AcuteISchemicStroke>()
                           .Select(m => new SelectListItem
                           {
                               Value = Convert.ToInt32(m).ToString(),
                               Text = m.ToDescription(),
                               Selected = (Model?.case_template_stroke_neuro_tpa?.csn_acute_stroke != null ? Model.case_template_stroke_neuro_tpa.csn_acute_stroke.Split(',').Select(k => k.ToInt()).Contains(m.ToInt()) ? true : false : false)
                           });

    var TPAVerbalConsent = Enum.GetValues(typeof(TPAVerbalConsent)).Cast<TPAVerbalConsent>()
                            .Where(m => m != TeleSpecialists.BLL.Helpers.TPAVerbalConsent.None)
                            .Select(m => new
                            {
                                Value = Convert.ToInt32(m).ToString(),
                                Text = m.ToDescription(),
                                Selected = (Model?.case_template_stroke_neuro_tpa?.csn_verbal_consent != null ? Model.case_template_stroke_neuro_tpa.csn_verbal_consent.Split(',').Select(k => k.ToInt()).Contains(m.ToInt()) ? true : false : false)
                            });

    var StrokeMechanismList = Enum.GetValues(typeof(StrokeMechanism)).Cast<StrokeMechanism>()
                    .Select(m => new SelectListItem
                    {
                        Value = Convert.ToInt32(m).ToString(),
                        Text = m.ToDescription(),
                        Selected = (Model?.case_template_stroke_neuro_tpa?.csn_mechanism_stroke != null ? Model.case_template_stroke_neuro_tpa.csn_mechanism_stroke.Split(',').Select(k => k.ToInt()).Contains(m.ToInt()) ? true : false : false)
                    });

    var TpaBolusGiven = Enum.GetValues(typeof(TPABolusGiven)).Cast<TPABolusGiven>()
                            .Select(m => new
                            {
                                Key = Convert.ToInt32(m).ToString(),
                                Value = m.ToDescription()
                            }).ToDictionary(m => m.Key, m => m.Value);



    var StrokeTemplateRecommendations = ViewBag.StrokeTemplateRecommendations as List<ucl_data>;
    var selectedRecommendations = Model?.case_template_stroke_neuro_tpa?.csn_additional_recomendations?.Split(',').Select(m => m.ToInt());

    var nihssList = ViewBag.NIHSSList as List<TeleSpecialists.BLL.Model.nih_stroke_scale_question>;
    var nihssSelectedOptions = ViewBag.NIHSSSelectedOptions as List<int>;
    if (nihssSelectedOptions == null)
    {
        nihssSelectedOptions = new List<int>();
    }

    IDictionary<string, object> dynamicHtmlAttributesTextArea = new Dictionary<string, object>();
    IDictionary<string, object> dynamicHtmlAttributes = new Dictionary<string, object>();
    IDictionary<string, object> dynamicHtmlAttributesForComment = new Dictionary<string, object>();


    dynamicHtmlAttributesTextArea.Add("style", "width:100%");
    dynamicHtmlAttributes.Add("class", "form-control");
    dynamicHtmlAttributes.Add("maxlength", "50");
    dynamicHtmlAttributesForComment.Add("style", "width:100%; height:100px;");

    var status = "false";
    if (Model.case_template_stroke_neuro_tpa != null)
    {
        if (Model.case_template_stroke_neuro_tpa.csn_patient_family_cosulted == null)
        {
            Model.case_template_stroke_neuro_tpa.csn_patient_family_cosulted = true;
        }
        if (Model.case_template_stroke_neuro_tpa.csn_patient_family_cosulted != null && Model.case_template_stroke_neuro_tpa.csn_patient_family_cosulted == false)
        {
            status = "true";
        }
    }

    DateTime examdate = Convert.ToDateTime("09/22/2020");
    var examtext = "false";
    var classdanger = "";
    if (Model.cas_created_date > examdate)
    {
        examtext = "true";
        classdanger = "text-danger";
    }
    var NIHSSComatose = Enum.GetValues(typeof(NIHSSPatientsComatose)).Cast<NIHSSPatientsComatose>().Select(m => new { Value = (int)m, Text = m.ToDescription() });
    SelectList NIHSSComatoseList = new SelectList(NIHSSComatose, "Value", "Text");
}

@Html.HiddenFor(m => m.case_template_stroke_neuro_tpa.csn_nihss_totalscore)
@Html.HiddenFor(m => m.SelectedNIHSQuestionResponse)

@if (Model.case_template_stroke_neuro_tpa != null)
{
    <input type="hidden" name="TemplateKey" id="TemplateKey" value="@Model.case_template_stroke_neuro_tpa.csn_cas_key" />
}

<input type="hidden" name="TemplateKeyName" id="TemplateKeyName" value="csn_cas_key" />

<input type="hidden" name="case_template_stroke_neuro_tpa.csn_cas_key" id="case_template_stroke_neuro_tpa_csn_cas_key" value="@Model.cas_key" />
<div class="form-group row case-template-tab">
    <div class="col-xl-4  col-lg-4 col-md-4 col-sm-12">
        <div class="form-group row">
            <label class="control-label col-12">Date of Consult: </label>
            <div class="col-12">
                @Model.cas_created_date.FormatDateTime()
            </div>
        </div>
        <div id="divImpression">
            <div class="form-group row">
                <label class="control-label col-12 text-danger">Impression: </label>
                <div class="col-10 col-offset-2 csn_acute_stroke">
                    @Html.HiddenFor(m => m.case_template_stroke_neuro_tpa.csn_acute_stroke)
                    @foreach (var item in AcuteISchemicStrokeList)
                    {
                        <div class="checkbox">
                            <input type="checkbox" data-IgnoreAutoSave="true" class="track_change" value="@item.Value" @(item.Selected ? "checked='checked'" : "")><label>&nbsp;@item.Text</label>
                        </div>
                    }
                </div>
            </div>

            <div class="form-group row">
                <div class="col-9">
                    @Html.TextAreaFor(m => m.case_template_stroke_neuro_tpa.csn_impression, dynamicHtmlAttributesTextArea)
                    <div class="error_msg" style="display:none;">
                        <label>This field is required</label>
                    </div>
                </div>
            </div>
        </div>
        <div class="form-group row">
            <label class="control-label col-12">Additional Recommendations: </label>
            <div class="col-10 col-offset-2" id="divAdditionalRecommendations">
                @Html.HiddenFor(m => m.case_template_stroke_neuro_tpa.csn_additional_recomendations)
                @foreach (var item in StrokeTemplateRecommendations)
                {
                    if (Model.case_template_stroke_neuro_tpa != null)
                    {
                        var isExists = selectedRecommendations != null ? selectedRecommendations.Contains(item.ucd_key) : false;
                        <div class="form-check mb-1">
                            <input class="form-check-input track_change" data-IgnoreAutoSave="true" id="SA_@item.ucd_key" type="checkbox" value="@item.ucd_key" @(isExists ? "checked='checked'" : "")>
                            <label class="form-check-label">@item.ucd_description</label>
                        </div>
                    }
                    else
                    {
                        <div class="form-check mb-1">
                            <input class="form-check-input track_change" data-IgnoreAutoSave="true" id="SA_@item.ucd_key" type="checkbox" value="@item.ucd_key" @(item.ucd_is_default ? "checked='checked'" : "")>
                            <label class="form-check-label">@item.ucd_description</label>
                        </div>
                    }
                }
            </div>
        </div>
        @*<div class="form-group row">
                <label class="control-label col-12 text-danger">Comments:</label>
                <div class="col-10" id="divComment">
                    @Html.TextAreaFor(m => m.case_template_stroke_neuro_tpa.csn_comment, new { @style = "width: 100%; height: 100%;" })
                    <div class="text-danger">
                        <label class="error">100 characters minimum (<span class="commentsCount">0</span>)</label>
                    </div>
                    <div class="error_msg" style="display:none;">
                        <label>This field is required</label>
                    </div>
                </div>
            </div>*@
        @{
            var templateTypes = new List<int>()
            {
                EntityTypes.StrokeAlertTemplateTpa.ToInt(),
                EntityTypes.NeuroStrokeAlertTemplateTpa.ToInt(),
                EntityTypes.StrokeAlertTemplateNoTpa.ToInt(),
                EntityTypes.StrokeAlertTemplateNoTpaTeleStroke.ToInt()
            };

            if (Model.TemplateEntityType.HasValue && templateTypes.Contains(Model.TemplateEntityType.Value))
            {
                <div class="form-group row">
                    <label class="control-label col-12 text-danger">Comments/Sign-Out:</label>
                    <div class="col-10" id="divComment">
                        @Html.TextAreaFor(m => m.cas_billing_comments, dynamicHtmlAttributesForComment)
                        <div class="text-danger">
                            <label class="error">100 characters minimum (<span class="commentsCount">0</span>)</label>
                        </div>
                        <div class="error_msg" style="display:none;">
                            <label>This field is required</label>
                        </div>
                    </div>
                </div>
            }
        }

    </div>
    <div class="col-xl-4  col-lg-4 col-md-4 col-sm-12">
        <div class="form-group row">
            <label class="control-label col-12">Mechanism of Stroke:</label>
            <div class="col-10 col-offset-2 csn_mechanism_stroke">
                @Html.HiddenFor(m => m.case_template_stroke_neuro_tpa.csn_mechanism_stroke)
                @foreach (var item in StrokeMechanismList)
                {
                    <div class="checkbox">
                        <input type="checkbox" class="track_change" data-IgnoreAutoSave="true" value="@item.Value" @(item.Selected ? "checked='checked'" : "" )><label>&nbsp;@item.Text</label>
                    </div>
                }
                <div id="case_template_stroke_neuro_tpa.csn_mechanism_stroke_freeText">
                    @Html.TextAreaFor(m => m.case_template_stroke_neuro_tpa.csn_mechanism_stroke_text, new { @class = "form-control mechanism_stroke_text", style = "width: 100%" })@*, placeholder = "Max text limit 2000." })*@
                    @Html.ValidationMessageFor(model => model.case_template_stroke_neuro_tpa.csn_mechanism_stroke_text, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
        <div class="form-group row">
            <label class="control-label col-12">tPA Bolus Given: </label>
            <div class="col-12">
                @Html.RadioButtonListFor(m => m.case_template_stroke_neuro_tpa.csn_tpa_bolus_complications, TpaBolusGiven)
                @Html.ValidationMessageFor(model => model.case_template_stroke_neuro_tpa.csn_tpa_bolus_complications, "", new { @class = "text-danger" })
            </div>
            <div class="col-10" id="csn_tpa_bolus_complications_text" style="display:none;">
                @Html.TextAreaFor(m => m.case_template_stroke_neuro_tpa.csn_tpa_bolus_complications_text, new { style = "width:100%" })
            </div>
        </div>

        <div class="form-group row">
            <label class="control-label col-12">Verbal Consent to tPA: </label>
            <div class="col-12" id="divVerbalConsent">
                @Html.HiddenFor(m => m.case_template_stroke_neuro_tpa.csn_verbal_consent)
                @foreach (var item in TPAVerbalConsent)
                {
                    <div class="checkbox">
                        <input type="checkbox" class="track_change" data-IgnoreAutoSave="true" value="@item.Value" @(item.Selected ? "checked='checked'" : "")><label>&nbsp;@item.Text</label>
                    </div>
                }

            </div>
        </div>
        <div class="form-group row">
            <label class="control-label col-12">Vitals Before tPA:</label>
            <div class="col-12">

            </div>
        </div>
        <div class="form-group row">
            <label class="control-label col-12 text-danger">BP: </label>
            <div class="col-10" id="divBP">
                @Html.TextAreaFor(m => m.case_template_stroke_neuro_tpa.csn_vitals_bp, dynamicHtmlAttributesTextArea)
                <div class="error_msg" style="display:none;">
                    <label>This field is required</label>
                </div>
            </div>
        </div>
        <div class="form-group row">
            <label class="control-label col-12 @classdanger">Pulse: </label>
            <div class="col-10" id="divpulse">
                @Html.TextAreaFor(m => m.case_template_stroke_neuro_tpa.csn_vitals_pulse, dynamicHtmlAttributesTextArea)
                <div class="error_msg" style="display:none;">
                    <label>This field is required</label>
                </div>
            </div>
        </div>
        <div class="form-group row">
            <label class="control-label col-12 text-danger">Blood Glucose: </label>
            <div class="col-10" id="divBloodGlucose">
                @Html.TextAreaFor(m => m.case_template_stroke_neuro_tpa.csn_vitals_blood_glucose, dynamicHtmlAttributesTextArea)
                <div class="error_msg" style="display:none;">
                    <label>This field is required</label>
                </div>
            </div>
        </div>
        <div class="form-group row">
            @{
                var yesNoOptions = new Dictionary<string, string>();
                yesNoOptions.Add("true", "Yes");
                yesNoOptions.Add("false", "No");
            }
            <label class="control-label col-12">Patient/Family Consent to Neurology Consult via TeleHealth</label>
            <div class="col-4">
                @Html.RadioButtonListFor(m => m.case_template_stroke_neuro_tpa.csn_patient_family_cosulted, yesNoOptions, new { @class = "csn_familyRD", @id = "csn_familyRD" })
            </div>
        </div>
        <div class="form-check mb-1" id="csn-family-consent" style="display:none">
            @Html.CheckBox("case_template_stroke_neuro_tpa.csn_family_consent_available", new { @class = "form-check-input track_change" })<label class="form-check-label"> Consent could not be obtained due to patient status and family not available </label>
        </div>

        <div class="form-group row">
            <label class="control-label col-12 text-danger">Critical Care was Provided: </label>

            <div class="col-12" id="divcriticalCare">
                @Html.RadioButtonListFor(m => m.case_template_stroke_neuro_tpa.csn_critical_care_was_provided, yesNoOptions)
                <div class="error_msg" style="display:none">
                    <label>This field is required</label>
                </div>
            </div>

            @{
                var display = "none";
                if (Model.case_template_stroke_neuro_tpa != null)
                {
                    if (Model.case_template_stroke_neuro_tpa.csn_critical_care_was_provided.HasValue && Model.case_template_stroke_neuro_tpa.csn_critical_care_was_provided.Value)
                    {
                        display = "";
                    }
                }
            }
        </div>
        <div class="form-group row" id="criticalcareTimeDiv" style="display:@display">
            <div class="col-8">
                <div class="input-group">
                    @Html.TextBoxFor(m => m.case_template_stroke_neuro_tpa.csn_critical_care_minutes, new { @class = "form-control minutes", @type = "number" })
                    <div class="input-group-append">
                        <span class="input-group-text">Minutes</span>
                    </div>

                </div>
            </div>
            <div class="col-4">
                <div class="error_msg" style="display:none">
                    <label>This field is required</label>
                </div>
            </div>
        </div>
    </div>
    <div class="col-xl-4  col-lg-4 col-md-4 col-sm-12">
        <div class="form-group row">
            <div class="col-6">
                @*@Html.CheckBoxFor(m => m.case_template_stroke_neuro_tpa.csn_ignore_nihss)*@
                @Html.CheckBoxFor(m => m.cas_nihss_cannot_completed)
                <label class="checkbox-inline">
                    <b> NIHSS may not be reliable due to</b>
                </label>
            </div>
            <div class="col-6">
                @Html.DropDownListFor(m => m.case_template_stroke_neuro_tpa.csn_NIHSS_comatose, NIHSSComatoseList, new { @id = "ddlNIHSS", @class = "form-control" })
            </div>
        </div>
        @* Added BY axim 10-09-2020 *@
        @* Added BY axim 17-11-2020 *@
        <div class="form-group row" id="divNIHSScomatose" style="display:none">
            @*<label class="control-label col-12 @classdanger">Exam Free Text: </label>*@
            <div class="col-12">
                @Html.TextAreaFor(m => m.case_template_stroke_neuro_tpa.csn_NIHSS_comatose_text, new { @class = "form-control" })
                @*<div class="text-danger">
                    <label class="error">50 characters minimum (<span class="Counter">0</span>)</label>
                </div>*@
                <div class="error_msg" id="case_template_stroke_neuro_tpa_csn_NIHSS_comatose_text-error" style="display:none;">
                    <label>This field is required</label>
                </div>
            </div>
        </div>
        @* Ended by Axim 17-11-2020 *@
        <div class="form-group row" id="divexamTextFree" style="display:none">
            <label class="control-label col-12 @classdanger">Exam Free Text: </label>
            <div class="col-12" id="divexamFree">
                @Html.TextAreaFor(m => m.cas_exam_free_text, new { @class = "form-control" })
                <div class="text-danger">
                    <label class="error">50 characters minimum (<span class="Counter">0</span>)</label>
                </div>
                <div class="error_msg" id="cas_exam_free_text-error" style="display:none;">
                    <label>This field is required</label>
                </div>
            </div>
        </div>
        @* Ended by Axim 10-09-2020 *@
        <div class="form-group row">
            <label id="stTPALabel" class="control-label col-12">NIH Stroke Scale/Score: </label>
            <div class="col-12" id="divTotalScore">
            </div>
        </div>
        <div id="stTPADiv">
            @foreach (var item in nihssList)
            {
                <div class="form-group row">
                    <label class="control-label col-12">@(item.nsq_title): </label>
                    <div class="col-12 nihss-empty d-none">
                        @Html.DropDownList("parent", Enumerable.Empty<SelectListItem>(), "", new { @class = "form-control" })
                    </div>
                    <div class="col-12 nihss">
                        @{
                            var defaultZero = item.nih_stroke_scale.Where(m => m.nss_score == 0).FirstOrDefault();
                            var selectItemList = item.nih_stroke_scale.Select(m => new SelectListItem
                            {
                                Text = m.nss_title + (m.nss_score > 0 ? " +" : " ") + m.nss_score,
                                Value = m.nss_key.ToString(),
                                Selected = nihssSelectedOptions.Contains(m.nss_key) ? true : (nihssSelectedOptions.Count() == 0 ? (m.nss_key == defaultZero?.nss_key) : false)
                            });
                            var name = "case_template_stroke_neuro_tpa.csn_nihss_" + item.nsq_key;
                        }
                        @Html.DropDownList(name, selectItemList, new { @style = "Width: 100%", @class = "form-control", @data_IgnoreAutoSave = true })
                    </div>
                </div>
            }
        </div>

    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        onCriticalOptionsChanged();
        setCriticalCareDefaults();
        csn_tpa_bolus_complications_change();
        calculateScore("#case_template_stroke_neuro_tpa_csn_nihss_totalscore");
        //if ($("#case_template_stroke_neuro_tpa_csn_ignore_nihss").is(':checked')) {
        if ($("#cas_nihss_cannot_completed").is(':checked')) {
            $(".nihss-empty").removeClass("d-none");
            $(".nihss").addClass("d-none");
            $("#divTotalScore").addClass("d-none");
            $("#divexamTextFree").show();
            @*if (@examtext) {
                $("#cas_exam_free_text").attr('required', true);
            }*@
        }
        else {
            $(".nihss-empty").addClass("d-none");
            $(".nihss").removeClass("d-none");
            $("#divTotalScore").removeClass("d-none");
            $("#divexamTextFree").hide();
            //$("#cas_exam_free_text").removeAttr('required');
        }

    })
    $("input[name='case_template_stroke_neuro_tpa.csn_tpa_bolus_complications']").off("change").on("change", csn_tpa_bolus_complications_change);

    function csn_tpa_bolus_complications_change() {
        var selectedVal = $("input[name='case_template_stroke_neuro_tpa.csn_tpa_bolus_complications']:checked").val();
        var withComplication = @TPABolusGiven.WithComplication.ToInt();
        if (selectedVal == withComplication) {
            $("#csn_tpa_bolus_complications_text").show();
        }
        else {
            $("#csn_tpa_bolus_complications_text").hide();
        }
    }

    $(".nihss select").off("change").change(function () {
        calculateScore("#case_template_stroke_neuro_tpa_csn_nihss_totalscore");
    });
    // Added By Axim 10-09-2020
    //Added By Axim 17-11-2020
    if ('@Model.case_template_stroke_neuro_tpa.csn_NIHSS_comatose' == "3") {
        $("#divNIHSScomatose").show();
    } else {
        $("#divNIHSScomatose").hide();
    }
    $("#ddlNIHSS").off("change").change(function () {
        var currentval = $(this).val();
        if (currentval == "3") {
            $("#divNIHSScomatose").show();
        }
        else {
            $("#divNIHSScomatose").hide();
        }
    });
    //Ended BY Axim 17-11-2020
    var existingText = $("#cas_exam_free_text").val();
    if (existingText != undefined) {
        var charactersTyped = existingText.replace(/\s/g, '').length;
        $(".Counter").html(charactersTyped);

        $("#cas_exam_free_text").keyup(function () {
            var text = $(this).val();
            var charactersTyped = text.replace(/\s/g, '').length;
            $(".Counter").html(charactersTyped)
        });
    }
    //Added By Axim
    if (@status== true) {
        $("#csn-family-consent").show();
    }

    $(".csn_familyRD").on("change").change(function () {
        var _value = $(this).val();
        if (_value == "false") {
            $("#csn-family-consent").show();
        }
        else {
            $("#csn-family-consent").hide();
        }

    });

    //$('#case_template_stroke_neuro_tpa_csn_ignore_nihss').change(function () {
        $('#cas_nihss_cannot_completed').change(function () {
            if ($(this).is(":checked")) {
                $(".nihss-empty").removeClass("d-none");
                $(".nihss").addClass("d-none");
                $("#divTotalScore").addClass("d-none");
                $("#divexamTextFree").show();
                @*if (@examtext) {
                    $("#cas_exam_free_text").attr('required', true);
                }*@
            }
        else {
            $(".nihss-empty").addClass("d-none");
            $(".nihss").removeClass("d-none");
            $("#divTotalScore").removeClass("d-none");
            $("#divexamTextFree").hide();
            //$("#cas_exam_free_text").removeAttr('required');
        }

    });

    function caseTemplateBeforeSubmit() {
        setQuestionResponse();
        setTemplateFieldData('#divImpression', '#case_template_stroke_neuro_tpa_csn_acute_stroke');
        setTemplateFieldData('.csn_mechanism_stroke', '#case_template_stroke_neuro_tpa_csn_mechanism_stroke');
        setTemplateFieldData('#divVerbalConsent', '#case_template_stroke_neuro_tpa_csn_verbal_consent');
        setTemplateFieldData('#divAdditionalRecommendations', '#case_template_stroke_neuro_tpa_csn_additional_recomendations');
        calculateScore("#case_template_stroke_neuro_tpa_csn_nihss_totalscore");
    }
</script>


