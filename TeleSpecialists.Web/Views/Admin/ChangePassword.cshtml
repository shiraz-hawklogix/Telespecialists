@using TeleSpecialists.BLL.Helpers

@model TeleSpecialists.Models.UpdateUserViewModel
@{
    ViewBag.Title = "Change Password";
}
<div class="ajaxForm">
    @using (Html.BeginForm(new { role = "form" }))
    {
        @Html.AntiForgeryToken()
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="row">
            <div class="col-sm-10 offset-sm-1">
                <h2>Change Password</h2>
                <hr />
            </div>
        </div>

        @Html.HiddenFor(model => model.Id)
        @Html.HiddenFor(model => model.IsApiUser)


        @*@Html.HiddenFor(model => model.Username)*@

        <div class="row">
            <div class="col-sm-10 offset-sm-1">
                <div class="form-group row">
                    <label class="control-label col-sm-4">Username: </label>
                    <div class="col-sm-8">
                        @Html.EditorFor(x => x.Username, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                        @Html.ValidationMessageFor(model => model.Username, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="control-label col-sm-4">Password: </label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control", @placeholder = "Enter New Password" } })
                        @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group row">
                    <label class="control-label col-sm-4">Confirm Password: </label>
                    <div class="col-sm-8">
                        @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control", @placeholder = "Confirm New Password" } })
                        @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                    </div>
                </div>

                @if (Model.IsApiUser)
                {

                   
                    <div class="form-group row">
                        <label class="control-label col-md-4 col-sm-12">API Secret Key: </label>
                        <div class="col-6">
                            @Html.EditorFor(x => x.APISecretKey, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.APISecretKey, "", new { @class = "text-danger" })
                        </div>
                        <div class="text-right col-2">

                            <input type="button" value="Generate Key" class="btn btn-dark" id="btnGenerateKey" />
                        </div>
                    </div>


                    <div class="form-group row apirole">
                        <label class="control-label col-md-4 col-sm-12">API Password: </label>
                        <div class="col-6">
                            @Html.EditorFor(x => x.APIPassword, new { htmlAttributes = new { @class = "form-control", @readonly = true } })
                            @Html.ValidationMessageFor(model => model.APIPassword, "", new { @class = "text-danger" })
                        </div>
                        <div class="text-right col-2">
                            <input type="button" value="Copy" class="btn btn-dark" id="btnCopyApikey" />
                        </div>
                    </div>
                }

            </div>
        </div>

        <div class="row">

            <div class="col-sm-6 offset-sm-5 text-right">
                <a class="btn btn-link loadLinkAsync" href="@Url.Action("Users","Admin")">Cancel</a>
                <input type="submit" value="Save" class="btn btn-dark" />
            </div>

        </div>
    }
</div>
<script>
    $(document).ready(function () {
        document.title = $("#title-prefix").val() + '@ViewBag.Title';

        $("#btnGenerateKey").off("click").click(function () {
            $("#mainContentArea").find("#validationSummary").empty();
         var result = "";
        var userName = $.trim($("#Username").val());
        var password = $("#Password").val();
        var secretKey = $.trim($("#APISecretKey").val());

        var isValid = $(".ajaxForm form").valid()
             if (isValid) {

                 if (userName != "" && password != "" && password != undefined && secretKey != "") {
                     if (userName.indexOf(":") != -1 || password.indexOf(":") != -1 || secretKey.indexOf(":") != -1 ) {
                         $("#mainContentArea").find("#validationSummary").empty().showBSDangerAlert("", "Colon(:) is not allowed in username, password and api secret key");
                         return false;
                     }
                result = userName + ":" + password + ":" + secretKey;
                var url = "@(Url.Action("EncodeString", "Admin"))";
                $.post(url, { inputString: result }, function (response) {
                    $("#APIPassword").val(response.data);
                });
            }
            else {
                $("#mainContentArea").find("#validationSummary").empty().showBSDangerAlert("", "Enter UserName and Password before generating secret key");
            }
        }
        })

        $("#btnCopyApikey").off("click").click(function () {
            var text = $("#APIPassword").val();
            setClipboardText(text);          
        });
    });
</script>