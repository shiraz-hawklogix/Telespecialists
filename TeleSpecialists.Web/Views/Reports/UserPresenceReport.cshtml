@using TeleSpecialists.BLL.Helpers;
@using TeleSpecialists.BLL.Extensions;
@using TeleSpecialists.BLL.Model;
@{
    ViewBag.Title = "User Presence Report";
    var currentDate = DateTime.Now.ToEST();
    var previousMonth = currentDate.AddMonths(-1);
}
@Html.Partial("_ReportLayout")

<div class="row" id="divLocalFilters">
    <div class="col-12">

        <div class="form-row">
            <div class="form-group col-xl-3 col-4" id="divfacility">
                <label for="Physicians">Physician</label>
                @Html.DropDownList("Physicians", ViewBag.Physicians as List<SelectListItem>, new { @class = "form-control", @multiple = "multiple" })
            </div>
            <div class="form-group col-xl-3 col-4">
                <label for="ddlTimeFrame">Time Frame</label>
                <select class="form-control" id="ddlTimeFrame">
                    <option value="ThisMonth" selected="selected">This Month</option>
                    <option value="PreviousMonth">Previous Month</option>
                    @*<option value="ThisYear">This Year</option>
                    <option value="PreviousYear">Previous Year</option>*@
                    <option value="CustomRange">Custom Range</option>
                    @*<option value="CustomMonth">Custom Month</option>*@
                </select>
            </div>
            <div class="form-group col-xl-3 col-4" style="display:none">
                <label for="ddlTimeFrame">Report Type</label>
                <select class="form-control" id="ddlreportType">
                    <option value="daily" selected="selected">Daily</option>
                    @*<option value="monthly">Monthly</option>*@
                </select>
            </div>

        </div>

        <div class="form-row">
                <div class="form-group row col-xl-6 col-12" id="divCustomDate" style="display:none;">
                    <div class="col-6 pr-0">
                        <label for="FromDate">From</label>
                        <input type="text" id="FromDate" name="FromDate" required class="form-control datepicker" />
                    </div>

                    <div class="col-6">
                        <label for="ToDate">To</label>
                        <input type="text" id="ToDate" name="ToDate" required class="form-control datepicker" />
                    </div>
                </div>

            </div>
        @*<div class="form-group row col-xl-6 col-12" id="divCustomDate" style="display:none;">
            <div class="col-6 pr-0">
                <label for="FromDate">Month</label>
                <input type="text" id="FromDate" name="FromDate" required class="form-control datepicker" />
            </div>
        </div>*@

        <div class="form-row">
            <div class="form-group col-1">
                <button type="button" class="btn btn-dark" id="btnSearch">Search</button>
            </div>
        </div>

    </div>
</div>
<div class="modal" id="graphmodal" data-backdrop="static" data-keyboard="false">
    <div class="modal-dialog modal-lg" style=" max-width: 1000px; width: 1000px; ">
        <div class="modal-content">
            <div class="modal-header">
                @*<button type="button" class="close" data-dismiss="modal">&times;</button>*@
                <button type="button" class="export-pdf k-button">Save as PDF</button>
            </div>
            <div class="modal-body">
                <div id="chart"></div>
            </div>
            <div class="modal-footer">
                <a class="btn btn-link" data-dismiss="modal">Close</a>
            </div>
        </div>
    </div>
</div>
<script>

    $(document).ready(function () {
        document.title = $("#title-prefix").val() + '@ViewBag.Title';
        $(".datepicker").kendoDatePicker({
            open: function (e) {
                onDatePickerOpen(e);
            }
        });
        //$("#FromDate").kendoDatePicker({
        //    start: "year",
        //    depth: "year",
        //    format: "MMMM yyyy",
        //    open: function (e) {
        //        onDatePickerOpen(e);
        //    }
        //});

        $("#ddlTimeFrame").off("change").change(function () {
            if ($(this).val() == "CustomRange") {
                $("#divCustomDate").show();
            }
            else {
                $("#divCustomDate").hide();
            }
        });

        $('#divLocalFilters').appendTo('#divFilters');

        $('#divLocalFilters').appendTo('#divFilters');

        $("#btnSearch").click(function () {
            var errorMessage = "";
            //if($("#ddlTimeFrame").val() == "CustomMonth") {
            //    if ($("#FromDate").val() == "")
            //        errorMessage = "Enter From Date<br/>";
            //}
            if ($("#ddlTimeFrame").val() == "CustomRange") {
                if ($("#FromDate").val() == "")
                    errorMessage = "Enter From Date<br/>";
                if ($("#ToDate").val() == "")
                    errorMessage += "Enter To Date";
            }
            if (errorMessage == "") {
                var existingGrid = $('#kendoDataGrid').data('kendoGrid');
                if (existingGrid) {
                    $('#kendoDataGrid').kendoGrid('destroy').empty();
                }
                loadGridData();
            }
            else {
                $("#mainContentArea").find("#validationSummary").empty().showBSDangerAlert("", errorMessage);
            }
        });

        var existingGrid = $('#kendoDataGrid').data('kendoGrid');

        if (existingGrid) {
            $('#kendoDataGrid').kendoGrid('destroy').empty();
        }

        resetDropDownOnDeseelect();
        loadGridData();
        $("#kendoDataGrid th").css("font-weight", "bold");
    });

    function loadGridData() {

        ShowLoading();

        $("#kendoDataGrid").kendoGrid({
        //toolbar: ["excel", "pdf"],
        excel: {
            allPages: true,
            filterable: false,
            fileName: '@ViewBag.Title' + '.xlsx',
            proxyURL: '@Url.Action("ExportToExcel")',
        },
        pdf: {
            author:  "TeleCare",
            creator: "TeleCare",
            date: new Date(),
            fileName: '@ViewBag.Title' + '.pdf',
            keywords: '@ViewBag.Title',
            subject: '@ViewBag.Title',
            title: '@ViewBag.Title',
            allPages: true,
            filterable: true
        },
        dataSource: {
            transport: {
                read: {
                    url: '@Url.Action("GetUserPresenceReport")',
                    contentType: "application/json",
                    type: "POST",
                    data: function () {
                        var filterModel = { startDate: null, endDate: null, Physicians: "",ReportType:""};
                        //var Getphysician = $("#Physicians").val();
                        //if (Getphysician == "") {
                        //    $('#Physicians option:not(:selected)').each(function (key, value) {
                        //        Getphysician.push(value.value);
                        //    });
                        //}
                        filterModel.Physicians = $("#Physicians").val();//Getphysician;
                        filterModel.ReportType = $("#ddlreportType").val();
                        switch ($("#ddlTimeFrame").val()) {
                            case "ThisMonth":
                                filterModel.startDate = "@(new DateTime(currentDate.Year, currentDate.Month,1).ToString())";
                                filterModel.endDate = "@(new DateTime(currentDate.Year, currentDate.Month, currentDate.Day).ToString())";
                                break;

                            case "PreviousMonth":
                                filterModel.startDate = "@(new DateTime(previousMonth.Year, previousMonth.Month,1).ToString())";
                                filterModel.endDate = "@(new DateTime(previousMonth.Year,previousMonth.Month, DateTime.DaysInMonth(previousMonth.Year, previousMonth.Month)).ToString())";
                                break;
                            @*case "ThisYear":
                                filterModel.startDate = "@(new DateTime(currentDate.Year, 1,1).ToString())";
                                filterModel.endDate = "@currentDate.ToString()";
                                break;
                            case "PreviousYear":
                                filterModel.startDate = "@(new DateTime(currentDate.AddYears(-1).Year, 1,1).ToString())";
                                filterModel.endDate = "@(new DateTime(currentDate.AddYears(-1).Year, 12,31).ToString())";
                                break;*@
                            case "CustomRange":
                                filterModel.startDate = $("#FromDate").val();
                                filterModel.endDate = $("#ToDate").val();
                            //case "CustomMonth":
                            //    var newdate = $("#FromDate").val();
                            //    if (newdate) {
                            //        var timeframe = newdate.split(" ");
                            //        var year = timeframe[1];
                            //        var month = new Date(Date.parse(timeframe[0] + '1,', year)).getMonth() + 1;
                            //        if (!isNaN(month)) {
                            //            var days = new Date(year, month, 0).getDate();
                            //        }
                            //        if (days) {
                            //            filterModel.startDate = month + '/1/' + year;
                            //            filterModel.endDate = month + '/' + days + '/' + year;
                            //        }
                            //    }
                                break;
                        }
                        return filterModel;
                    }
                },
                parameterMap: function (options) {
                    return kendo.stringify(options);
                }
            },
            schema: {
                               data: "Data",
                total: "Total"
            },
            serverPaging: false,
            serverFiltering: false,
            serverSorting: false,
            group: {
                field: "Physician"
            }
        },
        dataBound: function (e) {
            $("#kendoDataGrid th").css("font-weight", "bold");

            // Adjust dropdown horizental allignment in case of five-9 sidebae expanded.
            $('[data-role="dropdownlist"]').each(function () {
                var kendoDropDown = $(this).data("kendoDropDownList");
                if (kendoDropDown)
                    kendoDropDown.bind("open", onDropdDownOpen);
            });

            HideLoading();
        },
        columns: [
            {
                field: "Id", hidden: true
            },
            {
                field: "date", hidden: true            },
            {
                title: "<b>Action</b>", width: '50px',
                template: "<input type='button' class='btn btn-dark btn-sm datetime Navigator' data-datetime='#= date #' data-navigator='#= Id #' onclick='showgraph.call(this)' value='View' />"
            },
            {
                field: "CreatedDate", title: "Date", width: '150px'
                //template: "#= kendo.toString(kendo.parseDate(CreatedDate, 'yyyy-MM-dd'), 'MM/dd/yyyy') #"
            },
            { field: "PhysicianId", width: 100, title: "Id" },
            {
                field: "Physician", title: "Physician", width: '180px'
            },
            {
                field: "AvailableS", title: "Available", width: '80px'
            },
            {
                field: "TPAS", title: "TPA", width: '80px'
            },
            {
                field: "StrokeAlertS", title: "Stroke Alert", width: '80px'
            },
            {
                field: "RoundingS", title: "Rounding", width: '80px'
            },
            {
                field: "STATConsultS", title: "STAT Consult", width: '80px'
            },
            {
                field: "BreakS", title: "Break", width: '80px'
            }
        ],
        pageable: {
            refresh: true,
            pageSize: 10,
            pageSizes: [5, 10, 15, 20, 30, 50, 'All']
        },
        groupable: false,
        filterable: false,
        resizable: true,
        });
    }
    function SecondstoTimestamp(seconds) {
        var measuredTime = new Date(null);
        measuredTime.setSeconds(seconds); // specify value of SECONDS
        var MHSTime = measuredTime.toISOString().substr(11, 8);
        return MHSTime;
    }
    var showgraph = function () {
        var datetime = $(this).data("datetime");
            var NavigatorID = $(this).data("navigator");
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: '/Reports/GetUserPresenceGraphReport',
                data: { Physicians: NavigatorID, startDate: datetime, endDate: datetime },
                success: function (data) {
                    var CsvFormat = [];
                    var finalData = [];
                    var category = [];
                    var i;
                    for (i = 0; i < data.Data.length; i++) {

                        category.push(data.Data[i].StatusName);

                        if (data.Data[i].StatusName == 'Available')
                        {
                            finalData.push({ value: data.Data[i].diff, valueColor: "#3f5f29"/*, valueName:"Available"*/ });
                            CsvFormat.push([data.Data[i].CreatedDate, data.Data[i].StartTime ,SecondstoTimestamp(data.Data[i].diff), "Available", data.Data[i].diff, "#3f5f29"]);
                        }
                        if (data.Data[i].StatusName == 'TPA')
                        {
                            finalData.push({ value: data.Data[i].diff, valueColor: "#ff0505"/*, valueName: "TPA"*/ });
                            CsvFormat.push([data.Data[i].CreatedDate, data.Data[i].StartTime, SecondstoTimestamp(data.Data[i].diff), "TPA", data.Data[i].diff, "#ff0505"]);
                        }
                        if (data.Data[i].StatusName == 'Stroke Alert')
                        {
                            finalData.push({ value: data.Data[i].diff, valueColor: "#d26317"/*, valueName: "Stroke Alert"*/});
                            CsvFormat.push([data.Data[i].CreatedDate, data.Data[i].StartTime, SecondstoTimestamp(data.Data[i].diff), "Stroke Alert", data.Data[i].diff, "#d26317"]);
                        }
                        if (data.Data[i].StatusName == 'Rounding')
                        {
                            finalData.push({ value: data.Data[i].diff, valueColor: "#ffc105"/*, valueName: "Rounding"*/});
                            CsvFormat.push([data.Data[i].CreatedDate, data.Data[i].StartTime, SecondstoTimestamp(data.Data[i].diff), "Rounding", data.Data[i].diff, "#ffc105"]);
                        }
                        if (data.Data[i].StatusName == 'STAT Consult')
                        {
                            finalData.push({ value: data.Data[i].diff, valueColor: "#8e4311"/*, valueName: "STAT Consult"*/ });
                            CsvFormat.push([data.Data[i].CreatedDate, data.Data[i].StartTime, SecondstoTimestamp(data.Data[i].diff), "STAT Consult", data.Data[i].diff, "#8e4311"]);
                        }
                        if (data.Data[i].StatusName == 'Break')
                        {
                            finalData.push({ value: data.Data[i].diff, valueColor: "#88d5e1"/*, valueName: "Break"*/ });
                            CsvFormat.push([data.Data[i].CreatedDate, data.Data[i].StartTime, SecondstoTimestamp(data.Data[i].diff), "Break", data.Data[i].diff, "#88d5e1"]);
                        }
                    }
                    debugger
                    CsvFormat.splice(0,0,["Shift Date","Start Time","Duration", "Status", "Total Seconds","Color"]);
                    var CsvString = "";
                    CsvFormat.forEach(function (RowItem, RowIndex) {
                        RowItem.forEach(function (ColItem, ColIndex) {
                            CsvString += ColItem + ',';
                        });
                        CsvString += "\r\n";
                    });

                    CsvString = "data:application/csv," + encodeURIComponent(CsvString);
                    var link = document.createElement("a");
                    link.setAttribute("href", CsvString);
                    link.setAttribute("download", "UserPresenceReportDaily.csv");
                    document.body.appendChild(link);
                    link.click();

                    //createChart(category, finalData);
                    //$(document).bind("kendo:skinChange", createChart);
                    //$("#graphmodal").modal('show');
                },
                error: function () {

                }
            });
        }
        function createChart(category,finalData) {
            var chartHeight = 600;
            $("#chart").css("height", chartHeight);
            $("#chart").kendoChart({
                title: {
                    text: "User Presence Report",
                    color: "black",
                    margin: { top: 20, bottom: 50 }
                },
                legend: {
                    position: "bottom"
                },
                chartArea: {
                    background: "",
                    width: 966
                },
                seriesDefaults: {
                    type: "waterfall"
                },

                series: [{
                    colorField: "valueColor",
                    data: finalData
                }],
                 valueAxis: {
                    max: 43200,
                    line: {
                        visible: false
                    },
                    minorGridLines: {
                        visible: false
                     }
                    //labels: {
                    //     template: "#= kendo.format('{0:HH:mm:ss}', new Date(value)) #"
                    // }
                    // min: new Date(mindate).getTime(),
                },
                categoryAxis: {
                    categories: category,
                    labels: {
                        rotation: "auto"
                    }
                },
                axisDefaults: {
                    majorGridLines: {
                        visible: false
                    }
                },
                tooltip: {
                    visible: true,
                    template: "#= value #"
                }
            });
        }
        $(".export-pdf").click(function () {
            $("#chart").getKendoChart().saveAsPDF();
        })
</script>
<script type="text/javascript">
    $(document).ready(function () {
        $('#Physicians').multiselect({
            columns: 1,
            placeholder: 'Select Physician',
            search: true,
            searchOptions: {
                'default': 'Select Physician'
            },
            selectAll: true
        });
    });
</script>