
@using TeleSpecialists.BLL.Extensions;
@using TeleSpecialists.BLL.ViewModels.Reports;
@using TeleSpecialists.BLL.Helpers;
@{
    ViewBag.Title = "Volumetric Report";
    var currentDate = DateTime.Now.ToEST();
    var previousMonth = currentDate.AddMonths(-1);
    bool isAllowListing = (bool)ViewBag.AllowListing;
    string FacilityAdminMessage = (string)ViewBag.FacilityAdminMessage;
    string display = "";
    if (User.IsInRole(UserRoles.FacilityAdmin.ToDescription()))
    {
        display = "d-none";
    }

}
@if (isAllowListing)
{
    @Html.Partial("_ReportLayout")

    <div class="row" id="divLocalFilters">
        <div class="col-12">
            <div class="form-row">
                <div class="form-group col-xl-4 col-6 @display">
                    <label for="State">State</label>
                    @Html.DropDownList("fac_stt_key", ViewBag.States as List<SelectListItem>, new { @class = "form-control", @multiple = "multiple" })
                </div>
                <div class="form-group col-xl-4 col-6">
                    <label for="Facilities">Facility</label>
                    <select id="Facilities" name="Facilities" class="form-control Facilities" multiple="multiple"></select>
                </div>
                <div class="form-group col-xl-4 col-6">
                    <label>Wake Up Stroke</label>
                    <div id="divCaseWakeUpStroke">
                        @Html.DropDownList("WakeUpStroke", ViewBag.WakeUpStroke as List<SelectListItem>, new { @class = "form-control" })
                    </div>
                </div>
                <div class="form-group col-xl-4 col-6">
                    <label for="ddlTimeFrame">Time Cycle</label>
                    <select class="form-control" id="ddlTimeFrame">
                        <option>Select Cycle</option>
                        <option value="q15min">Q15min</option>
                        <option value="q20min">Q20min</option>
                        <option value="q30min">Q30min</option>
                        <option value="q40min">Q40min</option>
                        <option value="q60min">Q60min</option>
                        <option value="daily">Daily</option>
                        <option value="monthly">Monthly</option>
                        <option value="quarterly">Quarterly</option>
                    </select>
                </div>
                <div class="form-group col-xl-4 col-6">
                    <label for="ddlDefaultType">Default Type</label>
                    <select class="form-control" id="ddlDefaultType">
                        <option>Select Type</option>
                        <option value="billingtype">Billing Code</option>
                        <option value="casetype">Case Type</option>
                    </select>
                </div>
                <div class="form-group col-xl-4 col-6">
                    <label for="ddlCaseBlast">Blast</label>
                    <select class="form-control" id="ddlCaseBlast">
                        <option>Please Select</option>
                        <option value="true">Yes</option>
                        <option value="false">No</option>
                    </select>
                </div>
                <div class="form-group row col-xl-5 col-12" id="divDateRange" style="display:none;">
                    <div class="col-6 pr-0">
                        <label>From</label>
                        <input type="text" id=FromDate name=FromDate class="form-control datepicker" />
                        <span class="text-danger field-validation-error position-absolute" id="txtFromDateError"
                              style="display:none" data-valmsg-for=FromDate data-valmsg-replace="true">
                            <span id="FromDate-error" class=""></span>
                        </span>
                    </div>

                    <div class="form-group col-6">
                        <label>To Date</label>
                        <input type="text" id="ToDate" name="ToDate" class="form-control datepicker" />
                    </div>
                </div>
                <div class="form-group row col-xl-4 col-6" id="divSpecificDate" style="display:none;">
                    <div class="col-12">
                        <label>Date</label>
                        <input type="text" id="txtSpecificDate" name="txtSpecificDate" class="form-control datepicker" />
                        <span class="text-danger field-validation-error position-absolute" id="txtSpecificDateError"
                              style="display:none" data-valmsg-for="txtSpecificDate" data-valmsg-replace="true">
                            <span id="txtSpecificDate-error" class=""></span>
                        </span>
                    </div>
                </div>
                <div class="form-group row col-xl-5 col-12" id="divyearRange" style="display:none;">
                    <div class="col-6 pr-0">
                        <label>From</label>
                        <input type="text" id=FromYear name=FromYear class="form-control dateyearpicker" />
                        <span class="text-danger field-validation-error position-absolute" id="txtFromDateError"
                              style="display:none" data-valmsg-for=FromDate data-valmsg-replace="true">
                            <span id="FromDate-error" class=""></span>
                        </span>
                    </div>

                    <div class="form-group col-6">
                        <label>To Year</label>
                        <input type="text" id="ToYear" name="ToYear" class="form-control dateyearpicker" />
                    </div>
                </div>

                <div class="form-group row col-xl-5 col-12" id="divmonthRange" style="display:none;">
                    <div class="col-6 pr-0">
                        <label>From</label>
                        <input type="text" id=FromMonth name=FromMonth class="form-control datemonthpicker" />
                        <span class="text-danger field-validation-error position-absolute" id="txtFromDateError"
                              style="display:none" data-valmsg-for=FromDate data-valmsg-replace="true">
                            <span id="FromDate-error" class=""></span>
                        </span>
                    </div>

                    <div class="form-group col-6">
                        <label>To Month</label>
                        <input type="text" id="ToMonth" name="ToMonth" class="form-control datemonthpicker" />
                    </div>
                </div>

            </div>
            <div class="row">
                <div class="form-group col-xl-4 col-6">
                    <button type="button" class="btn btn-dark" id="btnSearch">Search</button>
                    <button type="button" class="btn btn-dark ml-2 d-none" id="resetSearch">Clear Search</button>
                    <button type="button" class="btn btn-dark" id="btnpiechart">Pie Chart</button>
                </div>
            </div>
        </div>
    </div>
    Html.RenderPartial("_QualityReportAdvanceSearch", new QualityMetricsAdvance());
    <div class="modal" id="graphmodal" data-backdrop="static" data-keyboard="false">
        <div class="modal-dialog modal-lg" style=" max-width: 1000px; width: 1000px; ">
            <div class="modal-content">
                <div class="modal-header">
                    @*<button type="button" class="close" data-dismiss="modal">&times;</button>*@
                    <button type="button" class="export-pdf k-button">Save as PDF</button>
                </div>
                <div class="modal-body">
                    <div id="chart"></div>
                </div>
                <div class="modal-footer">
                    <a class="btn btn-link" data-dismiss="modal">Close</a>
                </div>
            </div>
        </div>
    </div>
    <script src="~/Scripts/Custom/inputMask.js"></script>
    <script>
        $(document).ready(function () {
            $('#fac_stt_key').multiselect({
                columns: 1,
                placeholder: 'Select State',
                selectAll: true,
                search: true,
                searchOptions: {
                    'default': 'Search State'
                }
            });
            var state = 0;
            GetFacilityByState(state);
        })
        $("#fac_stt_key").change(function () {
            var state = $(this).val();
            if (state.length == 0) {
                state = 0;
            }
            GetFacilityByState(state);
        })
        function GetFacilityByState(state) {
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: '/Reports/GetFacilityByState',
                data: { state: state },
                success: function (data) {
                    $('.Facilities').multiselect('reset');
                    $('.Facilities').html("");
                    var html = "";
                    $.each(data, function (key, val) {
                        html += "<option value=" + val.Value + ">" + val.Text + "</option>";
                    });
                    $('.Facilities').append(html);
                    $('.Facilities').multiselect({
                        columns: 1,
                        placeholder: 'Select Facility',
                        selectAll: true,
                        search: true,
                        searchOptions: {
                            'default': 'Search Facility'
                        }
                    });
                    $('.Facilities').multiselect('reload');
                },
                error: function () {

                }
            });
            
        }

        function unCheckAllColumns() {

            $("#fieldsModel").find("input[type='checkbox']:checked").each(function () {

                var cb = $(this);
                $(cb).prop("checked", false);
            });
        }

        function showAllColumns() {

            var grid = $("#kendoDataGrid").data("kendoGrid");
            if (grid != null && grid != 'undefined') {

                var cols = grid.columns.length

            /// Starting from 2nd column so it will not effect the Action column
                for (var i = 2; i < cols; i++) {
                    grid.showColumn(i)
                }
            }
        }

        function filterColumns() {

            var grid = $("#kendoDataGrid").data("kendoGrid");

            if (grid == null || grid == 'undefined')
                return;
            var colsChecked = $("#fieldsModel").find("input[type='checkbox']:checked").length;




            showAllColumns();

            if (colsChecked == 0)
                return;

            $("#fieldsModel").find("input[type='checkbox']").each(function () {

                    var cb = $(this);

                // The id of checkbox and field/column in grid are same.
                var col = $(cb).attr("id");

                if ($(cb).prop("checked") == true)
                    grid.showColumn(col);
                else
                    grid.hideColumn(col);
            });

             //set the width of the table to 100% as it should not be showing blank area.
            $(".k-grid-header-wrap > table").css("width", "100%");
            $(".k-grid-content > table").css("width", "100%");

        }

        var isFacilityAdmin = @User.IsInRole(UserRoles.FacilityAdmin.ToDescription()).ToString().ToLower();
        $(document).ready(function () {
            document.title = $("#title-prefix").val() + '@ViewBag.Title';
            
            
            $('#btnExportPdf').hide();
            $('.datepicker').kendoDatePicker({
                open: function (e) {
                    onDatePickerOpen(e);
                }
            });
            $('.dateyearpicker').kendoDatePicker({
                start: "decade",
                depth: "decade",
                format: "yyyy",
                open: function (e) {
                    onDatePickerOpen(e);
                }
            });
            $('.datemonthpicker').kendoDatePicker({
                start: "year",
                depth: "year",
                format: "MMMM yyyy",
                open: function (e) {
                    onDatePickerOpen(e);
                }
            });
            $('#divLocalFilters').appendTo('#divFilters');
            $('.timeToEvaluate').inputmask("hh:mm:ss", {
                placeholder: "00:00:00",
                insertMode: false,
                showMaskOnHover: false,
                hourFormat: 12
            });

            $('#ddlTimeFrame').off("change").change(function () {
                $("#divDateRange,#divSpecificDate,#divyearRange,#divmonthRange").hide();
                var selectedValue = $(this).val();
                if (selectedValue === "q15min" || selectedValue === "q20min" || selectedValue === "q30min" || selectedValue === "q40min" || selectedValue === "q60min")
                    $("#divSpecificDate").show();
                else if (selectedValue === "daily")
                    $("#divDateRange").show();
                else if (selectedValue === "monthly")
                    $("#divmonthRange").show();
                else if (selectedValue === "quarterly")
                    $("#divyearRange").show();
            });

            

            $('#btnSearch').off("click").click(function () {

                var errorMessage = "";
                if ($("#ddlTimeFrame").val() == "daily") {
                    if ($("#FromDate").val() == "")
                        errorMessage = "Enter From Date<br/>";
                    if ($("#ToDate").val() == "")
                        errorMessage += "Enter To Date";
                }
                if ($("#ddlTimeFrame").val() == "monthly") {
                    if ($("#FromMonth").val() == "")
                        errorMessage = "Enter From Month<br/>";
                    if ($("#ToMonth").val() == "")
                        errorMessage += "Enter To Month";
                }
                if ($("#ddlTimeFrame").val() == "quarterly") {
                    if ($("#FromYear").val() == "")
                        errorMessage = "Enter From Year<br/>";
                    if ($("#ToYear").val() == "")
                        errorMessage += "Enter To Year";
                }
                if (errorMessage == "") {
                    loadGridData();
                    localStorage.setItem('QualityMetricsReport.SearchApplied', true);
                    $("#resetSearch").removeClass("d-none");
                }
                else {
                    $("#mainContentArea").find("#validationSummary").empty().showBSDangerAlert("", errorMessage);
                }


            });
            $('#resetSearch').off("click").click(function () {

                unCheckAllColumns();
                localStorage.setItem('QualityMetricsReport.SearchApplied', false);
                $('.Facilities').val("");
                $('.Facilities').multiselect('reload');
                $('#ddlTimeFrame').val("Last48Hours").change();
                $('.cb_benchMarck').each(function () {
                    $(this).prop("checked", false);
                    var parentGroup = $(this).parents(".form-group");
                    $(parentGroup).find("select").val("0");
                    $(parentGroup).find("select").disable();
                    $(parentGroup).find(".timeToEvaluate ").val("");
                    $(parentGroup).find(".timeToEvaluate ").disable();
                });
                loadGridData();
                setWidthOfDropDowns();
                $("#resetSearch").addClass("d-none");
            });
            $('#kendoDataGrid').attr("style", "min-height : unset !important");
            $('.cb_benchMarck').change(function () {
                var ischecked = $(this).is(':checked');
                var parentGroup = $(this).parents(".form-group");
                if (!ischecked) {
                    $(parentGroup).find("select").val("0");
                    $(parentGroup).find(".timeToEvaluate").val("");
                    $(parentGroup).find(".error_msg").hide();
                    $(this).parents(".form-group").find("select, .timeToEvaluate").disable();
                }
                else {
                    $(this).parents(".form-group").find("select, .timeToEvaluate").enable();
                }
            });
            resetDropDownOnDeseelect();
            loadGridData();
            setWidthOfDropDowns();
        });
        function mapModelProperties(elem, benchMark) {
            var data = {};
            if ($(benchMark).prop("checked") == true) {
                $(elem).find('select').each(function () {
                    data.ComparisonOperator = this.value;
                });
                $(elem).find('input[type="text"]').each(function () {
                    data.TimeToEvaluate = this.value;
                });
            }
            else {
                data = null;
            }
            return data;
        }

        function loadGridData() {
            showAllColumns();

         $("#kendoDataGrid").kendoGrid({
                excel: {
                    allPages: true,
                    filterable: false,
                    fileName: '@ViewBag.Title' + '.xlsx',
                    proxyURL: '@Url.Action("ExportToExcel")',
                },
                dataSource: {
                    transport: {
                        read: {
                            url: '@Url.Action("GetVolumeMetricsReport")',
                            contentType: "application/json",
                            type: "POST",
                            data: function () {

                                var model = {
                                    Facilities: "",
                                    TimeFrame: "",
                                    StartDate: null,
                                    EndDate: null,
                                    DefaultType: null,
                                    Blast: null,
                                    states: "",
                                    WakeUpStroke: false
                                };
                                model.Facilities = $(".Facilities").val();
                                model.states = $("#fac_stt_key").val();
                                model.CaseStatus = 20;
                                var checktype = $("#ddlDefaultType").val();
                                if (checktype == "Select Type") {
                                    model.DefaultType = "billingtype";
                                } else {
                                    model.DefaultType = $("#ddlDefaultType").val();
                                }
                                var isblast = $("#ddlCaseBlast").val();
                                if (isblast == "Please Select") {
                                    model.Blast = "";
                                } else {
                                    model.Blast = $("#ddlCaseBlast").val();
                                }
                                if ($("#WakeUpStroke").val() == "1") {
                                    model.WakeUpStroke = true;
                                } else {
                                    model.WakeUpStroke = false;
                                }
                                model.TimeFrame = $("#ddlTimeFrame").val();
                                    switch (model.TimeFrame) {
                                        case "q15min":
                                            model.StartDate = $("#txtSpecificDate").val();
                                            model.EndDate = $("#txtSpecificDate").val();
                                            break;
                                        case "q20min":
                                            model.StartDate = $("#txtSpecificDate").val();
                                            model.EndDate = $("#txtSpecificDate").val();
                                            break;
                                        case "q30min":
                                            model.StartDate = $("#txtSpecificDate").val();
                                            model.EndDate = $("#txtSpecificDate").val();
                                            break;
                                        case "q40min":
                                            model.StartDate = $("#txtSpecificDate").val();
                                            model.EndDate = $("#txtSpecificDate").val();
                                            break;
                                        case "q60min":
                                            model.StartDate = $("#txtSpecificDate").val();
                                            model.EndDate = $("#txtSpecificDate").val();
                                            break;
                                        case "daily":
                                            model.StartDate = $("#FromDate").val();
                                            model.EndDate = $("#ToDate").val();
                                            break;
                                        case "monthly":
                                            model.StartDate = $("#FromMonth").val();
                                            model.EndDate = $("#ToMonth").val();
                                            break;
                                        case "quarterly":
                                            model.StartDate = $("#FromYear").val()+'-1-1';
                                            model.EndDate = $("#ToYear").val()+'-12-31';
                                            break;
                                }

                                    localStorage.setItem('QualityMetricsReport.Filter', JSON.stringify(model));
                                    return model;
                                },
                            type: "POST"
                        },
                        parameterMap: function (options) {
                            return kendo.stringify(options);
                        }
                    },
                    schema: {
                        data: "Data",
                        total: "Total"
                    },
                    //serverPaging: true,
                    //serverFiltering: true,
                    //serverSorting: true,
                    //pageSize: GetKendoPageSize("QualityReport", "RecPerPage", true),
                    //page: KendoGet("QualityReport", "page")
                    serverPaging: true,
                    pageSize: 30,
                    serverFiltering: false,
                    serverSorting: true,
                },
             width: '100%',
             pageable: {
                 refresh: true,
                 //pageSizes: true,
                 //pageSize: 10
                 pageSizes: [30, 50,100, 'All']
             },
             groupable: false,
             filterable: true,
             sortable: true,
             resizable: true,
             dataBound: function (e) {

                    $("#kendoDataGrid .k-auto-scrollable").scrollLeft(0);
                    // Adjust dropdown horizental allignment in case of five-9 sidebae expanded.
                    $('[data-role="dropdownlist"]').each(function () {
                        var kendoDropDown = $(this).data("kendoDropDownList");
                        if (kendoDropDown)
                            kendoDropDown.bind("open", onDropdDownOpen);
                 });

                 filterColumns();
             },
             columns: [{ field: "date", width: 260, title: "Date" },
                 {
                     headerTemplate: "<input type='button' class='btn btn-dark btn-sm' data-graphid='strokealert' onclick='showgraph.call(this)' value='Graph View' />",
                     columns: [{ field: "strokealert", width: 100, title: "Stroke Alert" }]
                 },
                 {
                     headerTemplate: "<input type='button' class='btn btn-dark btn-sm' data-graphid='stat' onclick='showgraph.call(this)' value='Graph View' />",
                     columns: [{ field: "stat", width: 100, title: "STAT" }]
                 },
                 {
                     headerTemplate: "<input type='button' class='btn btn-dark btn-sm' data-graphid='New' onclick='showgraph.call(this)' value='Graph View' />",
                     columns: [{ field: "New", width: 100, title: "New" }]
                 },
                 {
                     headerTemplate: "<input type='button' class='btn btn-dark btn-sm' data-graphid='followup' onclick='showgraph.call(this)' value='Graph View' />",
                     columns: [{ field: "followup", width: 100, title: "FollowUp" }]
                 },
                 {
                     headerTemplate: "<input type='button' class='btn btn-dark btn-sm' data-graphid='eeg' onclick='showgraph.call(this)' value='Graph View' />",
                     columns: [{ field: "eeg", width: 100, title: "EEG" }]
                 }
             ]
            });
        }
        function validateForm() {
            var selectedOption = $("#ddlTimeFrame").val();
            $("#txtStartDateError").hide();
            if (selectedOption == "CustomRange") {
                var start_date = $("#txtStartDate").val();
                var end_date = $("#txtEndDate").val();
                if (start_date != "" && end_date != "") {
                    var duration = moment.duration(moment(end_date).diff(new Date(start_date)));
                    if (duration.asMinutes() < 0) {
                        $("#txtStartDateError").html("Start Date must be less then End Date");
                        $("#txtStartDateError").show();
                        return false;
                    }
                }
            }
            return true;
        }
        function getPatientIntial(tableId, columnIndex) {
            $(tableId).find("tr").each(function (index, element) {
                var row = $(element);
                var patient = row.find("td:nth-child(" + columnIndex + ")").text();
                if ($.trim(patient) != "") {
                    var patientName = $.trim(patient).split(' '),
                        initials = patientName[0].substring(0, 1).toUpperCase();
                    if (patientName.length > 1) {
                        initials += patientName[patientName.length - 1].substring(0, 1).toUpperCase();
                    }
                    row.find("td:nth-child(" + columnIndex + ")").html(initials);
                }
            });
        }
        var showgraph = function () {
            var Graphstatus = $(this).data("graphid");
            var model = {
                Facilities: "",
                StartDate: null,
                EndDate: null,
                TimeFrame: "",
                DefaultType: null,
                WakeUpStroke: false
            };
            model.Facilities = $(".Facilities").val();
            model.states = $("#fac_stt_key").val();
            model.CaseStatus = 20;
            var checktype = $("#ddlDefaultType").val();
            if (checktype == "Select Type") {
                model.DefaultType = "billingtype";
            } else {
                model.DefaultType = $("#ddlDefaultType").val();
            }
            if ($("#WakeUpStroke").val() == "1") {
                model.WakeUpStroke = true;
            } else {
                model.WakeUpStroke = false;
            }
            var isblast = $("#ddlCaseBlast").val();
            if (isblast == "Please Select") {
                model.Blast = "";
            } else {
                model.Blast = $("#ddlCaseBlast").val();
            }

            model.TimeFrame = $("#ddlTimeFrame").val();
            switch (model.TimeFrame) {
                case "q15min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "q20min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "q30min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "q40min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "q60min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "daily":
                    model.StartDate = $("#FromDate").val();
                    model.EndDate = $("#ToDate").val();
                    break;
                case "monthly":
                    model.StartDate = $("#FromMonth").val();
                    model.EndDate = $("#ToMonth").val();
                    break;
                case "quarterly":
                    model.StartDate = $("#FromYear").val() + '-1-1';
                    model.EndDate = $("#ToYear").val() + '-12-31';
                    break;
            }
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: '/Reports/GetVolumeBarGraphModal',
                data: { model: model,Status:Graphstatus },
                success: function (data) {
                    var GetRecord = data[data.length - 1];
                    var Name = GetRecord.name;
                    var xaxis = GetRecord.xlabel;
                    var Category = GetRecord.category;
                    var datalist = [{ name: GetRecord.name, data: GetRecord.datalist, color: '@ChartColors.Blue.ToDescription()' }];

                    createChart(Name, Category, datalist, xaxis);
                    $(document).bind("kendo:skinChange", createChart);
                    $("#graphmodal").modal('show');
                },
                error: function () {

                }
            });
        }
        function createChart(name, category = [], datalist = [], xaxis) {
            $("#chart").kendoChart({
                //title: {
                //    text: name
                //},
                legend: {
                    position: "top"
                },
                chartArea: {
                    background: "",
                    width: 966
                },
                seriesDefaults: {
                    type: "column",
                    labels: {
                        visible: true,
                        template: "#= value #",
                        format: "{0}",
                        margin: 20
                    }
                },
                series: datalist,
                valueAxis: {
                    labels: {
                        format: "{0}"
                    },
                    line: {
                        visible: false
                    },
                    title: {
                        text: "Case Count"
                    },
                    axisCrossingValue: 0
                },
                categoryAxis: {
                    categories: category,
                    line: {
                        visible: false
                    },
                    title: {
                        text: xaxis
                    }
                },
                //tooltip: {
                //    visible: true,
                //    format: "{0}",
                //    template: "#= value #"
                //},
                pannable: {
                    lock: "y"
                },
                zoomable: {
                    mousewheel: {
                        lock: "y"
                    },
                    selection: {
                        lock: "y"
                    }
                }
            });
        }
        $("#btnpiechart").click(function () {
            var model = {
                Facilities: "",
                Physicians: "",
                StartDate: null,
                EndDate: null,
                TimeFrame: "",
                DefaultType: null,
                WakeUpStroke: false
            };
            model.Facilities = $(".Facilities").val();
            model.states = $("#fac_stt_key").val();
            model.CaseStatus = 20;
            var checktype = $("#ddlDefaultType").val();
            if (checktype == "Select Type") {
                model.DefaultType = "billingtype";
            } else {
                model.DefaultType = $("#ddlDefaultType").val();
            }

            var isblast = $("#ddlCaseBlast").val();
            if (isblast == "Please Select") {
                model.Blast = "";
            } else {
                model.Blast = $("#ddlCaseBlast").val();
            }
            if ($("#WakeUpStroke").val() == "1") {
                model.WakeUpStroke = true;
            } else {
                model.WakeUpStroke = false;
            }
            model.TimeFrame = $("#ddlTimeFrame").val();
            switch (model.TimeFrame) {
                case "q15min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "q20min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "q30min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "q40min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "q60min":
                    model.StartDate = $("#txtSpecificDate").val();
                    model.EndDate = $("#txtSpecificDate").val();
                    break;
                case "daily":
                    model.StartDate = $("#FromDate").val();
                    model.EndDate = $("#ToDate").val();
                    break;
                case "monthly":
                    model.StartDate = $("#FromMonth").val();
                    model.EndDate = $("#ToMonth").val();
                    break;
                case "quarterly":
                    model.StartDate = $("#FromYear").val() + '-1-1';
                    model.EndDate = $("#ToYear").val() + '-12-31';
                    break;
            }
            $.ajax({
                cache: false,
                async: true,
                type: "POST",
                url: '/Reports/GetVolumeGraphModal',
                data: { model: model },
                success: function (data) {
                    var datasour = [];
                    var title = "";
                    var casecount = "";
                    var isblast = $("#ddlCaseBlast").val();
                    $.each(data,function (key, value) {
                        $.each(value, function (id, dat) {
                            if (title == "") {
                                title = "Volumetric Report Graph, " + dat;
                            } else if (datasour.length == 0) {
                                if (isblast == "true") {
                                    datasour.push({ category: "StrokeAlert (Blast Only)", value: dat, color: '@ChartColors.Blue.ToDescription()' });
                                } else if (isblast == "false") {
                                    datasour.push({ category: "StrokeAlert (Blast Excluded)", value: dat, color: '@ChartColors.Blue.ToDescription()' });
                                } else {
                                    datasour.push({ category: "StrokeAlert", value: dat, color: '@ChartColors.Blue.ToDescription()' });
                                }
                                
                            } else if (datasour.length == 1) {
                                datasour.push({ category: "STAT", value: dat, color: '@ChartColors.SoftBlue.ToDescription()' });
                            } else if (datasour.length == 2) {
                                datasour.push({ category: "New", value: dat, color: '@ChartColors.Grayish.ToDescription()' });
                            } else if (datasour.length == 3) {
                                datasour.push({ category: "FollowUp", value: dat, color: '@ChartColors.Teal.ToDescription()' });
                            } else if (datasour.length == 4) {
                                datasour.push({ category: "EEG", value: dat, color: '@ChartColors.Purple.ToDescription()' });
                            } else if (casecount == "") {
                                casecount = "Total Cases" + " - " + dat;
                            }
                        })

                    })

                    createPieChart(title, datasour, casecount);
                    $(document).bind("kendo:skinChange", createPieChart);
                    $("#graphmodal").modal('show');
                },
                error: function () {

                }

            });
        })
        function createPieChart(title,datas=[],casecount) {
            $("#chart").kendoChart({
                title: {
                    position: "bottom",
                    text: title + "\n" + casecount,
                    color: "black"
                },
                legend: {
                    visible: true
                },
                chartArea: {
                    background: "",
                    width: 966
                },
                seriesDefaults: {
                    labels: {
                        visible: true,
                        background: "transparent",
                        template: "#= category #: \n #= value#"
                    }
                },
                series: [{
                    type: "pie",
                    startAngle: 150,
                    data: datas
                }],
                tooltip: {
                    visible: true,
                    format: "{0}"
                }
            });
        }
        $(".export-pdf").click(function () {
            $("#chart").getKendoChart().saveAsPDF();
        })
    </script>
}
else
{
    <div class="col-12  dashboard-indicators p-2">
        <label class="font-weight-normal">@FacilityAdminMessage</label>
    </div>
}