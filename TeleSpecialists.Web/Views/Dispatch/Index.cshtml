@using TeleSpecialists.BLL.Helpers;
@using TeleSpecialists.BLL.Extensions;
@using TeleSpecialists.BLL.Model;

@{
    ViewBag.Title = "Index";
    var navigators = ViewBag.navigators;
}


<style>

    #styleReasonsDD {
        list-style: none;
        background-color: #fff;
        padding: 2% 10%;
        border: 1px solid #ccc;
        border-radius: 3px;
        margin: 1px;
    }

        #styleReasonsDD a:hover {
            text-decoration: none;
            color: #000;
        }

    #styleReasonsUL {
        list-style: none;
        background-color: #fff;
        padding: 0px;
        margin: 1px;
        width: 100%;
    }

        #styleReasonsUL a:hover {
            text-decoration: none;
            color: #000;
        }

    ul {
        /*list-style: none;
        padding: 0;
        margin: 0;
        background: #1bc2a2;*/
    }

        ul li {
            /*display: block;
            position: relative;
            float: left;
            background: #1bc2a2;*/
        }


    li ul {
        display: none;
    }

    ul li a {
        display: block;
        /*padding: 1em;*/
        text-decoration: none;
        white-space: normal;
        color: #000;
    }

    /*ul li a:hover {
            background: #e2e2e2;
        }*/


    li:hover > ul {
        display: block;
        position: absolute;
    }

    li:hover li {
        float: none;
    }

    /*li:hover a {
        background: #e2e2e2;
    }

    li:hover li a:hover {
        background: #e2e2e2;
    }*/

    .main-navigation li ul li {
        border-top: 0;
    }


    ul ul ul {
        left: 100%;
        top: 0;
    }

    Simple clearfix.

    ul:before,
    ul:after {
        content: " "; /* 1 */
        display: table; /* 2 */
    }

    ul:after {
        clear: both;
    }
    .modal-backdrop {
        z-index: -1;
    }
</style>

<div class="row">
    <div class="col-lg-3 col-xl-3 col-sm-3 col-md-3" style="margin-bottom:20px;">
        <div class="border" id="divToolTip">
            <div class="text-danger"><strong>*Tool Tip</strong></div>
            <div>
                <div>3 Minutes - Yellow (Assignment overdue)</div>
                <div>6 Minutes - Orange (Physician blast)</div>
                <div>8 Minutes - Red (Physician blast tier2)</div>
            </div>
        </div>
    </div>
</div>
<div class="row" style="margin-top:-20px">
    <div class="col-md-12">

        @*<div class="custom-control custom-switch">
                <input data-role="switch" class="custom-control-input" id="refreshSwitch" checked="checked"/>
                <label class="custom-control-label" for="refreshSwitch">Auto Refresh</label>
            </div>*@
        @*<button class="btn btn-dark btn-sm py-1" onclick="manualRefresh()">Refresh</button>*@
        <div class="customGridHeader">
            <div class="row">
                <div id="dispatchWaitingToAcceptGrid" class="col-md-8" style="padding:0px; height:440px; border:0px;">
                </div>
                <div class="col-md-4" style="padding:0px; height:440px; border:0px; overflow:scroll;">
                    <table class="table table-sm" style="font-size:11px;">
                        <thead>
                            <tr>
                                <th class="control-label">Physician</th>
                                <th class="control-label">Status</th>
                                <th class="control-label">Time</th>
                                <th class="control-label">Action</th>
                                <th class="control-label">Logged In Status</th>
                            </tr>
                        </thead>
                        <tbody id="tbodyForPhysician"></tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>
<div class="row" style="margin-top:5px">
    <div>
        @*<h3>Stroke Alerts Accepted</h3>*@
        <div class="customGridHeader">
            <div class="row">
                <div id="dispatchAcceptedGrid" class="col-md-12" style="padding:0px; height:300px; border:0px;">
                </div>
                @*<div class="col-md-4" id="firebaseChatDiv" >
                   {Html.RenderAction("_firebaseChat");}
                </div>*@
            </div>



            @* @Html.Partial("_dispatchAccepted")*@
        </div>
    </div>

</div>

<div class="sticky">Chat Messages <span class="Stickybadge">0</span></div>
<div class="stickyFirebase" style="display:none">
    <span class="Stickybadge">0</span>
    <div class="headerStickyFirebase">Chat Messages</div>
    <div class="bodyStickyFirebase">
        <div class="contentChat">
            @{Html.RenderAction("_firebaseChat");}
        </div>
    </div>
</div>

@Html.Partial("_dispatchCopyPopup")



@*<script src="https://www.gstatic.com/firebasejs/3.6.9/firebase.js"></script>*@
<script>
    var navigatorsArr = [];
    $(document).ready(function () {
        var unreadBadge = $('.Stickybadge').html();
        if (unreadBadge === '0')
            $('.Stickybadge').hide();

        @foreach (var item in navigators)
            {
                @:navigatorsArr.push({ user_id: "@item.user_id", email: "@item.email", name: "@item.name", firbaseuid: "@item.UserName", ImgPath: "@item.ImgPath"});
            }
       

    });
    //if (!firebase.apps.length) {
    //    firebase.initializeApp(config);
    //}
    function _CreateGroupNew(name, grptype, msg, physician, navArr) {
        if (physician) {
            GrpCreate(name, grptype, msg, physician, navArr);
        }
        else {
            CreatNewGrp(name, grptype, msg, physician, navArr);
        }
    }
</script>

<script type="text/javascript">
    if ($("#dispatchWaitingToAcceptGrid").data("kendoGrid") == undefined || $("#dispatchWaitingToAcceptGrid").data("kendoGrid") == null) {

        $("#dispatchWaitingToAcceptGrid").kendoGrid({
            dataSource: {
                transport: {
                    read: {
                        url: '@Url.Action("GetAll")',
                        contentType: "application/json",
                        type: "POST"
                    },
                    update: {
                        url: '@Url.Action("Save")',
                        contentType: "application/json",
                        type: "POST"
                    },
                    parameterMap: function (options) {
                        options = KendoKeepState("dispatchWaitingToAccept", options, true);
                        if ((options.filter !== undefined && options.filter.filters !== undefined) == false) {
                            if (options.filter === undefined)
                                options.filter = {};
                            if (options.filter.filters === undefined)
                                options.filter.filters = [];
                            if (options.filter.logic === undefined)
                                options.filter.logic = "and";
                            options.filter.filters.push({ field: "cas_cst_key-filter", operator: "eq", "value": '@TeleSpecialists.BLL.Helpers.CaseStatus.WaitingToAccept.ToInt()' });
                            options.filter.filters.push({ field: "multi_cas_ctp_key-filter", operator: "eq", "value": '@TeleSpecialists.BLL.Helpers.CaseType.StrokeAlert.ToInt()' });
                            options = KendoKeepState("dispatchWaitingToAccept", options, true);

                        }

                        //options.filter.filters.push(getCaseTypesBasedOnTab());
                        exportPostData = options;
                        return kendo.stringify(options);
                    }
                },
                mobile: "phone",
                schema: {
                    model: {
                        id: "cas_key",
                        fields: {
                            cas_key: { editable: false, nullable: false },
                            cas_cst_key: { editable: true, nullable: false },
                            cas_phy_key: { editable: true, nullable: false },
                            cas_patient: { editable: false, nullable: false },
                            ctp_name: { editable: false, nullable: false },
                            timeElapsed: { editable: false, nullable: false },
                            cas_fac_key: { editable: false, nullable: false },
                            cas_ctp_key: { editable: false, nullable: false },
                            phy_name: { editable: true, nullable: false },
                            cst_name: { defaultValue: { "ucd_title": "Waiting To Accept", " ucd_key": "18", }, editable: true, nullable: false },
                            cas_status_assign_date: { editable: false, nullable: false },
                            cas_cart: { editable: false, nullable: true },
                            fac_name: { editable: false, nullable: true },
                            PhysicianDD: { editable: false, nullable: true },
                            physician_key: { editable: false, nullable: false },
                            physician_fullname: { editable: false, nullable: false },
                            CombinedMessage: { editable: false, nullable: true },
                        }
                    },
                    data: "Data",
                    total: "Total"
                },
                page: KendoGet("dispatchWaitingToAccept", "page"),
                pageSize: GetKendoPageSize("dispatchWaitingToAccept", "RecPerPage", true),
                serverPaging: true,
                serverFiltering: true,
                serverSorting: true,
            },
            dataBound: function (e) {
                applyColors();
                SetColor();
                SetKendoTotalCount("dispatchWaitingToAccept", $('#dispatchWaitingToAcceptGrid').data("kendoGrid").dataSource.total());
                // Adjust dropdown horizental allignment in case of five-9 sidebae expanded.
                $('[data-role="dropdownlist"]').each(function () {
                    var kendoDropDown = $(this).data("kendoDropDownList");
                    if (kendoDropDown)
                        kendoDropDown.bind("open", onDropdDownOpen);
                });
            },
            filterable: false,
            sortable: true,
            scrollable: true,
            resizable: true,
            pageable: {
                refresh: true,
                pageSizes: true,
                buttonCount: 5
            },
            columns: [
                { hidden: true, field: "cas_key" },
                { hidden: true, field: "cas_fac_key" },
                { hidden: true, field: "dateTimeElapsed" },

                { command: { template: "<button class='btn btn-warning btn-sm py-1' onclick='internalBlast(event)'>I B</button>" }, title: "", width: "40px !important" },
                { command: { template: "<button class='btn btn-danger btn-sm py-1' onclick='externalBlast(event)'>E B</button>" }, title: "", width: "40px !important" },
                {
                    field: "fac_name", title: "Facility", width: '150px',
                    attributes: { "class": "case-grid-facitlityName" }
                },
                {
                    field: "cas_patient", title: "Patient", width: '100px',
                    attributes: { "class": "case-grid-casetype" }
                },
                {
                    field: "cas_cart", title: "Cart", width: '100px',
                    attributes: { "class": "case-grid-cart" }
                },
                {
                    field: "phy_name", title: "Physician", width: '130px',
                    editor: physicianDropDownEditor, template: "#=phy_name#",
                    attributes: { "class": "case-grid-physician wrapWord" }, hidden: @(User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) || User.IsInRole(UserRoles.Physician.ToDescription()) ? "true" : "false"),
                },
                {
                    field: "cst_name", title: "Status", width: '130px',
                    editor: caseStatusDropDownEditor, template: "#=cst_name#",
                    attributes: { "class": "case-grid-status" }, hidden: @(User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) || User.IsInRole(UserRoles.Physician.ToDescription()) ? "true" : "false"),
                },
                { command: { template: "<button class='btn btn-dark btn-sm py-1'' onclick='submitThisForm(event)'>Save</button>"}, title: " ", width: "60px" },
                {
                    field: "timeElapsed", title: "Time Elapsed", width: '80px',
                    attributes: { "class": "case-grid-time_elapsed" }

                },
                {
                    width: '60px',
                    template: "<button class='btn btn-dark btn-sm py-1 loadLinkAsync' onclick='copyDispatchCase(#=cas_key#)'>Copy</button>"
                },
                { hidden: true, field: "physician_key" },
                { hidden: true, field: "phy_name" },
                { hidden: true, field: "CombinedMessage" }
            ],
            editable: true
                });
            }
            else {

        $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataSource.filter({
                    logic: "or",
                    filters: filters
        });
    }
    //function _refreshData() {
    //    var currentUrl = $("#hdnCurrentUrl").val().toLowerCase();
    //    if (currentUrl.indexOf("/dispatch") > -1 || currentUrl.indexOf("/dispatch/index") > -1) {

    //        if (_refreshData.timeout != undefined)
    //            window.clearTimeout(_refreshData.timeout);

    //        _refreshData.timeout = window.setTimeout(function () {
    //            $("#hdnDisableLoader").val("1");
    //            var grid = $('#dispatchWaitingToAcceptGrid').data("kendoGrid");
    //            if (grid != undefined)
    //                grid.dataSource.read();
    //            SetColor();
    //        }, 5000);
    //    }
    //}
    //function manualRefresh() {
    //    var grid = $('#dispatchWaitingToAcceptGrid').data("kendoGrid");
    //    if (grid != undefined)
    //        grid.dataSource.read();
    //    SetColor();
    //}
    function refreshWaitingToAcceptedGrid() {
        var grid = $('#dispatchWaitingToAcceptGrid').data("kendoGrid");
        if (grid != undefined)
            grid.dataSource.read();
        SetColor();
    }
    function refreshAcceptedGrid() {
        var grid = $('#dispatchAcceptedGrid').data("kendoGrid");
        if (grid != undefined)
            grid.dataSource.read();
    }


    function applyColors() {
         $("#dispatchWaitingToAcceptGrid tr").each(function (index, element) {
             var row = $(element);
             var defaultTimeZoneOffset = @Functions.GetTimeZoneOffset(TeleSpecialists.BLL.Settings.DefaultTimeZone);
             var currentDateTime = moment(moment().utcOffset(defaultTimeZoneOffset, false).format("YYYY-MM-DD HH:mm:ss"));
             var assign_date = row.find("td:eq(2)");
             var cas_status_assign_date = moment(row.find("td:eq(2)").text());
             var result = cas_status_assign_date.isValid();

             if (result != false) {

                var duration = moment.duration(currentDateTime.diff(cas_status_assign_date.format("YYYY-MM-DD HH:mm:ss")));
                if (duration.asMinutes() >= 3 && duration.asMinutes() <= 6) {
                    row.children("td").addClass("text-yellow font-weight-bold");
                }
               else  if (duration.asMinutes() >= 6 && duration.asMinutes() <= 8) {
                    row.children("td").addClass("text-orange font-weight-bold");
                }
                else if (duration.asMinutes() >= 8) {
                    row.children("td").addClass("text-danger font-weight-bold");
                }
            }
        });

        if (applyColors.To != undefined)
            window.clearTimeout(applyColors.To);

        applyColors.To = window.setTimeout(applyColors, 2000);
    }


    // husnain code for firebase
    async function callCopy() {
        copyFirebase();
    }

    function CreateMsg(dataItem) {
        var msg = 'Stroke Alert' + ' ' + dataItem.fac_name + ', NC Cart: ' + dataItem.cas_cart + ', Phone:' + dataItem.cas_callback + ', Patient Name:' + dataItem.cas_patient;
        return msg;
    }

    // code end
     function internalBlast(e) {
        e.preventDefault();
        var dataItem = $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));
        var facKey = dataItem.cas_fac_key;
         var case_type = dataItem.cas_ctp_key;
         var cas_key = dataItem.cas_key;
         var automsg = CreateMsg(dataItem);

        var baseurl = "@Url.Action("GetPhysiciansForInternalBlast")";
        $.ajax({
            url: baseurl + "?fac_key=" + facKey + "&cas_ctp_key=" + case_type + "&softSaveGuid=" + "" + "&cas_key=" + cas_key,
            type: 'POST',
            success: function (e) {
                // All Scheduled Physicians List > [ responseObjectInternal ]
                console.log(e);
                var internalBlastArr = [];
                internalBlastArr = navigatorsArr;
                for (var i = 0; i < e.length; i++) {
                    let checkUserExist = navigatorsArr.some(x => x.user_id == e[i].AspNetUser_Id);
                    if (!checkUserExist) {
                        let name = e[i].AspNetUser_FirstName + ' ' + e[i].AspNetUser_LastName;
                        internalBlastArr.push({ user_id: e[i].AspNetUser_Id, email: e[i].firebaseEmail, name: name, firbaseuid: e[i].firebaseId, ImgPath: e[i].img });
                    }
                }
                let grpName = 'Internal Blast Stroke Alert';
                //_CreateGroupNew(grpName, 'Private', automsg, '', internalBlastArr);
                console.log('navigators array : ', internalBlastArr);
            },
            error: function () {
                console.log("error");
            }
        });

    }
    function externalBlast(e) {
        e.preventDefault();
        var dataItem = $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));
        var facKey = dataItem.cas_fac_key;
        var case_type = dataItem.cas_ctp_key;
        var cas_key = dataItem.cas_key;
        var baseurl = "@Url.Action("GetPhysiciansForExternalBlast")";
        $.ajax({
            url: baseurl + "?fac_key=" + facKey + "&cas_ctp_key=" + case_type + "&softSaveGuid=" + "" + "&cas_key=" + cas_key,
            type: 'POST',
            success: function (responseObjectExternal) {
                // All Credentialed Physicians List > [ responseObjectExternal ]
                console.log(responseObjectExternal);
            },
            error: function () {
                console.log("error");
            }
        });

    }
    function GetAutoStamp(caskey, phy_key, physician, automStampMsg) {
        if (automStampMsg != "" && automStampMsg != undefined) {
            let textToPreview = automStampMsg.replaceAll("##NewLine##", "<br/>");
            var automsg = textToPreview; //CreateMsg(dataItem)
            CallFirebaseMsg(phy_key, physician, automsg);
        }
        @*$.ajax({
            url: "@Url.Action("GetCaseCopyData")?case_key=" + caskey,
             type: 'GET',
             success: function (data) {
                 var textToCopy = data;
                 if (textToCopy != "" && textToCopy != undefined) {
                     let textToPreview = textToCopy.replaceAll("##NewLine##", "<br/>");
                     var automsg = textToPreview; //CreateMsg(dataItem)
                     CallFirebaseMsg(phy_key, physician, automsg);
                 }
            },
            error: function () {
                console.log("error");
            }
        });*@
    }
    function CallFirebaseMsg(phy_key, physician, automsg) {
        console.log('phy-key : ' + phy_key + ' ,  phyname : ' + physician);
        let grpName = physician + ' ' + 'SA';
        console.log(grpName);
        $.ajax({
            type: 'POST',
            url: '/firebaseChat/GetUser',
            data: { id: phy_key },
            success: function (e) {
                navigatorsArr.push({ user_id: e.fre_userId, email: e.fre_email, name: e.fre_firstname, firbaseuid: e.fre_firebase_uid, ImgPath: e.fre_profileimg });
                _CreateGroupNew(grpName, 'Private', automsg, phy_key, navigatorsArr);
            },
            Error: function (e) {
            }
        });
    }
    function submitThisForm(e) {
        RefreshMode = true;
        var STFrow = $(e.currentTarget).closest("tr");

        // Set Save Button Green & Disabled on Click 
        debugger
        var savecolumn = STFrow[0].children[10];
        var btn = $(savecolumn).children().eq(0);
        $(btn).removeClass("btn-dark");
        $(btn).addClass("btn-success");

        $(btn).removeAttr("disabled");
        $(btn).attr("disabled", "disabled");
        //
        var dataItem = $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));
        var checkPhyKey = STFrow[0].children[13].innerText;
        var automStampMsg = dataItem.CombinedMessage;
        console.log('your auto stamp is: ' + automStampMsg);
        debugger;
        var phy_key = "";
        if (checkPhyKey == "00000000-0000-0000-0000-000000000000" || checkPhyKey == "") {
            phy_key = dataItem.cas_phy_key; 
        }
        else {
            var phy_key = STFrow[0].children[13].innerText;
        } 
        console.log('total navigators we found : ', navigatorsArr);
        e.preventDefault();
        var casKey = dataItem.cas_key;
        var status = dataItem.cst_name;
        var physician = STFrow[0].children[14].innerText;


        if (status == "Waiting to Accept") { // Important Check To Stop Multiple Alert Popups to Physician
            GetAutoStamp(casKey, phy_key, physician, automStampMsg);
        }

        var baseurl = "@Url.Action("Save")";
        $.ajax({
            url: baseurl + "?casKey=" + casKey + "&physician=" + phy_key + "&status=" + status,
            type: 'POST',
            success: function (resp) {
                if (resp == "Updated") {
                    //window.location.href = '../Dispatch/Index';
                    console.log("success");
                    refreshWaitingToAcceptedGrid();
                    refreshAcceptedGrid();
                }
            },
            data: {
                format: 'json'
            },
            error: function () {
                console.log("error");
            }
        });
        markAsSent(e);
      //  markAsDisabled(e);


    }
    var sentCases = [];
    var disabledSaveButtons = [];
    var rows = [];

    function markAsSent(e) {
        
        var dataItem = $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));
        var casKey = dataItem.cas_key;
       // sentCases.push(casKey);

        var url = "@Url.Action("DisableButton")";
        $.ajax({
            url: url + "?cas_key=" + casKey,
            type: 'POST',
            success: function (resp) {
                SetColor();
                
                //if (resp) { 
                //    console.log("success"); 
                //}
            },
            data: {
                format: 'json'
            } 
        });

    }
    //function markAsDisabled(e) {

    //    var dataItem = $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataItem($(e.currentTarget).closest("tr"));
    //    var casKey = dataItem.cas_key;
    //    disabledSaveButtons.push(casKey);
    //   // SetDisabled();
    //}

    function SetColor() {
        var grid = $("#dispatchWaitingToAcceptGrid").data("kendoGrid");
        var records = [];
        records.push(grid.table);
        var firstLevel = records[0];
        var secondLevel = firstLevel[0];
        var thirdLevel = secondLevel.children[1];
        rows = thirdLevel.children;

        for (var idx = 0; idx < rows.length; idx++) {
            var tds = rows[idx].children;
            var key = tds[0].innerText;
            var savecolumn = tds[10];
            var btn = $(savecolumn).children().eq(0);

            for (var sidx = 0; sidx < sentCases.length; sidx++) {
                 
                if (sentCases[sidx].cas_key == parseInt(key) && sentCases[sidx].row_status == false) {
                     
                    $(btn).removeClass("btn-dark");
                    $(btn).addClass("btn-success");

                    $(btn).removeAttr("disabled");
                    $(btn).attr("disabled", "disabled");
                }
            }
        }
        if (SetColor.To != undefined)
            window.clearTimeout(SetColor.To);

        SetColor.To = window.setTimeout(SetColor, 3000);
    }

    //function SetDisabled() {
    //    var grid = $("#dispatchWaitingToAcceptGrid").data("kendoGrid");
    //    var records = [];
    //    records.push(grid.table);
    //    var firstLevel = records[0];
    //    var secondLevel = firstLevel[0];
    //    var thirdLevel = secondLevel.children[1];
    //    rows = thirdLevel.children;

    //    for (var idx = 0; idx < rows.length; idx++) {
    //        var tds = rows[idx].children;
    //        var key = tds[0].innerText;
    //        var savecolumn = tds[10];
    //        var btn = $(savecolumn).children().eq(0);

    //        for (var sidx = 0; sidx < disabledSaveButtons.length; sidx++) {

    //            if (disabledSaveButtons[sidx] == parseInt(key)) {
    //                $(btn).removeAttr("disabled");
    //                $(btn).attr("disabled", "disabled");
    //            }
    //        }
    //    }
    //    if (SetDisabled.To != undefined)
    //        window.clearTimeout(SetDisabled.To);

    //    SetDisabled.To = window.setTimeout(SetDisabled, 500);
    //}


    function copyDispatchCase(key) {
        $("#divCaseCopy").html("");
         $.ajax({
             url: "@Url.Action("GetCaseCopyData")?case_key="+key,
             type: 'GET',
             success: function (data) {
                 console.log("success");
                 var textToCopy = data;
                 if (textToCopy != "" && textToCopy != undefined) {
                     setClipboardText(textToCopy.replaceAll("##NewLine##", "\r\n"));
                     var textToPreview = textToCopy.replaceAll("##NewLine##", "<br/>");
                     $("#caseCopyPopUp").find(".modal-body").empty().html(textToPreview);
                     $("#caseCopyPopUp").modal("show");
                 }
            },
            error: function () {
                console.log("error");
            }
        });
    }



        var caseStatusList = {
            StatusList: [
                { "ucd_key": "17", "ucd_title": "Open" },
                { "ucd_key": "18", "ucd_title": "Waiting To Accept" },
                { "ucd_key": "19", "ucd_title": "Accepted" },
                { "ucd_key": "20", "ucd_title": "Complete" },
                { "ucd_key": "140", "ucd_title": "Cancelled" }
            ]
        }
    $("#dispatchWaitingToAcceptGrid tbody").on("click", "td", function (e) {
        var dataItem = $(e.currentTarget).closest("tr");
        var secondChild = $(dataItem).children('td').eq(1);

        var cas_fac_key = $(secondChild).html();
        var cas_ctp_key = 9;
        getphysiciansStatus(cas_fac_key, cas_ctp_key);
    });

      function getphysiciansStatus(cas_fac_key, cas_ctp_key) {
        var baseurl = "@Url.Action("GetPhysiciansForDispatch")";

            $.ajax({
                url: baseurl + "?fac_key=" + cas_fac_key + "&cas_ctp_key=" + cas_ctp_key,
                type: 'POST',              
                success: function (resp) {
                    console.log("success");
                        $("#tbodyForPhysician").html(resp.htmlData);
                },
            data: {
                format: 'json'
            },
            error: function () {
                console.log("error");
            }
         });
    }

    function physicianDropDownEditor(container, options) {

        var datarow = $(container).closest("tr");
        //var dataItem = $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataItem($(container).closest("tr"));

        //var SelectedPhysician = options.model.PhysicianDD.filter(
        //    function (xx) {
        //        if (xx.Selected == true) {
        //            return xx;
        //        }
        //    }); 

        $('<input required name="' + options.field + '"/>')
            .appendTo(container)
            .kendoDropDownList({
                autoBind: false,
                dataTextField: "Text",
                dataValueField: "Value",
                dataSource: options.model.PhysicianDD,
                select: function (e) {
                    if (e.dataItem != undefined) {
                        var phyvalue = e.dataItem.Value;
                        var phytext = e.dataItem.Text;
                    }
                    else {
                        var phyvalue = e[0].Value;
                        var phytext = e[0].Text;
                    }
                   
                    //Clearing td
                    datarow[0].children[13].innerText = "";
                    datarow[0].children[14].innerText = "";
                    //Clearing td

                    datarow[0].children[13].append(phyvalue);
                    datarow[0].children[14].append(phytext);

                    if (e.dataItem != undefined) {
                        e.dataItem.Value = e.dataItem.Text;
                    }
                },
                change: function (e) {
                    
                    if (SetColor.To != undefined) {
                        window.clearTimeout(SetColor.To);
                    }
                    //var dataItem = $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataItem($(container).closest("tr"));
                    //var casKey = dataItem.cas_key;
                    //const index = disabledSaveButtons.indexOf(casKey);
                    //if (index > -1) {
                    //    disabledSaveButtons.splice(index, 1);
                    //}
                    
                    var ColumnCell = datarow[0].children[10];
                    $(ColumnCell.children[0]).removeAttr("disabled");
                }  
            });

        RefreshMode = false;
        clearInterval(Continued);
        Continued = setInterval(function () { ContinuePausedRefresh(); }, 60000);
    }
    

        function caseStatusDropDownEditor(container, options) {
            var datarow = $(container).closest("tr");
            $('<input required name="' + options.field + '"/>')
                .appendTo(container)
                 .kendoDropDownList({
                    autoBind: false,
                    dataTextField: "Text",
                    dataValueField: "Text",
                    dataSource: options.model.CaseStatusDD,
                     value: "Text",
                     change: function (e) {
                         //var dataItem = $("#dispatchWaitingToAcceptGrid").data("kendoGrid").dataItem($(container).closest("tr"));
                         //var casKey = dataItem.cas_key;
                         //const index = disabledSaveButtons.indexOf(casKey);
                         //if (index > -1) {
                         //    disabledSaveButtons.splice(index, 1);
                         //}

                         var ColumnCell = datarow[0].children[10];
                         $(ColumnCell.children[0]).removeAttr("disabled");
                     }
                    
                });

            RefreshMode = false;
            clearInterval(Continued);
            Continued = setInterval(function () { ContinuePausedRefresh(); }, 60000);
    }

    function CallAutoStamp() {

    }

    async function CreateAutoStamp(caskey) {
        let _result = await GetAutoStamp(caskey);
        console.log('result from controller:', _result);
        return _result;
    }
    


</script>

<script type="text/javascript">


        if ($("#dispatchAcceptedGrid").data("kendoGrid") == undefined || $("#dispatchAcceptedGrid").data("kendoGrid") == null) {

            $("#dispatchAcceptedGrid").kendoGrid({
                        dataSource: {
                            transport: {
                                read: {
                                    url: '@Url.Action("GetAll")',
                                    contentType: "application/json",
                                    type: "POST"
                                },
                                parameterMap: function (options) {
                                    options = KendoKeepState("dispatchAcceptedGrid", options, true);
                                    if ((options.filter !== undefined && options.filter.filters !== undefined) == false) {
                                        if (options.filter === undefined)
                                            options.filter = {};
                                        if (options.filter.filters === undefined)
                                            options.filter.filters = [];
                                        if (options.filter.logic === undefined)
                                            options.filter.logic = "and";
                                        options.filter.filters.push({ field: "cas_cst_key-filter", operator: "eq", "value": '@TeleSpecialists.BLL.Helpers.CaseStatus.Accepted.ToInt()' });
                                        options.filter.filters.push({ field: "multi_cas_ctp_key-filter", operator: "eq", "value": '@TeleSpecialists.BLL.Helpers.CaseType.StrokeAlert.ToInt()' });
                                        options = KendoKeepState("dispatchAcceptedGrid", options, true);

                                    }
                                    exportPostData = options;
                                    return kendo.stringify(options);
                                }
                            },
                            mobile: "phone",
                            schema: {
                                model: {
                                    id: "cas_key",
                                    fields: {
                                        cas_key: { editable: false, nullable: false },
                                        cas_cst_key: { editable: false, nullable: false },
                                        cas_phy_key: { editable: false, nullable: false },
                                        cas_patient: { editable: false, nullable: false },
                                        cas_fac_key: { editable: false, nullable: false },
                                        cas_ctp_key: { editable: false, nullable: false },
                                        phy_name: { editable: false, nullable: false },
                                        cst_name: { editable: false, nullable: false },
                                        cas_status_assign_date: { editable: false, nullable: false },
                                        cas_cart: { editable: false, nullable: true },
                                        fac_name: { editable: false, nullable: true },
                                        crr_reason: { editable: true, nullable: true }
                                    }
                                },
                                data: "Data",
                                total: "Total"
                            },
                            page: KendoGet("dispatchAcceptedGrid", "page"),
                            pageSize: GetKendoPageSize("dispatchAcceptedGrid", "RecPerPage", true),
                            serverPaging: true,
                            serverFiltering: true,
                            serverSorting: true,
                        },
                        dataBound: function (e) {

                            SetKendoTotalCount("dispatchAcceptedGrid", $('#dispatchAcceptedGrid').data("kendoGrid").dataSource.total());

                        },
                        filterable: false,
                        sortable: true,
                        scrollable: true,
                        resizable: true,
                        pageable: {
                            refresh: true,
                            pageSizes: true,
                            buttonCount: 5
                        },
                columns: [
                    { hidden: true, field: "cas_key" },
                    { hidden: true, field: "cas_fac_key" },
                    { field: "fac_name", title: "Facility", width: '150px', attributes: { "class": "case-grid-facitlityName" }},
                    { field: "cas_patient", title: "Patient", width: '100px', attributes: { "class": "case-grid-patient" }},
                    { field: "cas_cart", title: "Cart", width: '110px', attributes: { "class": "case-grid-cart" }},
                    { field: "phy_name", title: "Physician", width: '100px', attributes: { "class": "case-grid-physician" }, hidden: @(User.IsInRole(UserRoles.FacilityAdmin.ToDescription()) || User.IsInRole(UserRoles.Physician.ToDescription()) ? "true" : "false")},
                    { field: "crr_reason", title: "Reject", width: '130px', editor: caseRejectDropDownEditor, template: "#=crr_reason#", attributes: { "class": "case-grid-crr_reason" }}
                ],
                editable: true
                    });
                }
                else {


            $("#dispatchAcceptedGrid").data("kendoGrid").dataSource.filter({
                        logic: "or",
                        filters: filters
            });
     }
    function caseRejected(cas_key, reason, reasonText) {
        console.log('got from controller : ' + reasonText);
         var baseurl = "@Url.Action("RejectCase")";
            $.ajax({
                url: baseurl + "?casKey=" + cas_key + "&casReasonId=" + reason + "&caseRejectionType=" + "",
                type: 'POST',
                success: function (e) {
                    console.log("Success Result Received: " + e);
                    refreshWaitingToAcceptedGrid();
                    refreshAcceptedGrid();
                    if (e !== 'true') {
                        var grpForRejectCase = [];
                        var dataArrray = e.list;
                        for (var i = 0; i < dataArrray.length; i++) {
                            grpForRejectCase.push({ user_id: dataArrray[i].user_id, email: dataArrray[i].email, name: dataArrray[i].name, firbaseuid: dataArrray[i].UserName, ImgPath: dataArrray[i].ImgPath });
                        }
                        
                        console.log('chat going to be initait : ' , grpForRejectCase);
                        let grpName = 'Technical Discussion ' + e.initials;//'Technical Discussion Case# ' + e.caseNumber;
                        let automsg = 'Lets start Discussion on technical issues with reason ' + reasonText + ' of Case# ' + e.caseNumber + ' with ' + e.physicianName;
                        let grpfor = 'TD_' + e.phy_key + '_' + e.initials;
                        _CreateGroupNew(grpName, 'Private', automsg, grpfor, grpForRejectCase);
                    }


                },
            data: {
                format: 'json'
            },
            error: function () {
                console.log("error");
            }
         });
    };

    function caseRejectDropDownEditor(e) {
        var dataItem = $("#dispatchAcceptedGrid").data("kendoGrid").dataItem($(e).closest("tr"));
         var cas_key = dataItem.cas_key;
         var RejectionReasonsMenu = "";

         $.ajax({
             cache: false,
             async: true,
             type: "GET",
             url: '/Dispatch/GetRejectionReasonsMenuString?cas_key=' + cas_key,
             success: function (data) {
                 RejectionReasonsMenu = data;
                 $(RejectionReasonsMenu).appendTo(e);
             }
         });
    }

    function CheckSaveButtonStatus() { 
        debugger
        $("#hdnDisableLoader").val("1");
        $.ajax({
            type: 'GET',
            url: '/Dispatch/GetBtnStatusList',
            success: function (e) {
                if (e) { 
                    sentCases = [];
                    sentCases = e;
                }
            },
            Error: function (e) {
                console.error(e);
            },
            complete: function (e) {
            }
        });
    }





    //function CheckRefreshCase() {
    //    $("#hdnDisableLoader").val("1");
    //    $.ajax({
    //        type: 'POST',
    //        url: '/Dispatch/GetRefreshCase',
    //        success: function (e) {
    //            console.log('refresh data : ' + e);
    //            if (e) {
    //                if (e === true) {
    //                    refreshWaitingToAcceptedGrid();
    //                    refreshAcceptedGrid();
    //                    StopRefresh();
    //                }
    //            }
    //        },
    //        Error: function (e) {
    //            console.error(e);
    //        },
    //        complete: function (e) {
    //        }
    //    });
    //}

    
    //function StopRefresh() {
    //    $.ajax({
    //        type: 'POST',
    //        url: '/Dispatch/SetRefreshCase',
    //        success: function (e) {
    //            console.log('stop refresh data : ' + e); 
    //        },
    //        Error: function (e) {
    //            console.error(e);
    //        }
    //    });

    //}






    ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    var GlobalRefreshTrigger = 0;
    var GlobalGetSaveButtonListTrigger = 0;
    var RefreshMode = true;
    function CheckRefreshCase() {
        $("#hdnDisableLoader").val("1");
        $.ajax({
            type: 'POST',
            url: '/Dispatch/GetRefreshCase',
            success: function (e) {
                console.log('refresh data : ' + e);
                if (e) {
                    if (RefreshMode){
                        if (GlobalRefreshTrigger != e) {
                            refreshWaitingToAcceptedGrid();
                            refreshAcceptedGrid();
                            GlobalRefreshTrigger = e;
                        }
                    }
                }
            },
            Error: function (e) {
                console.error(e);
            },
            complete: function (e) {
            }
        });
    }

    function CheckRefreshSaveStatusList() {
        $("#hdnDisableLoader").val("1");
        $.ajax({
            type: 'POST',
            url: '/Dispatch/GetSaveStatusBit',
            success: function (e) {
                console.log('Save Button List : ' + e);
                if (e) { 
                    if (GlobalGetSaveButtonListTrigger != e)
                    { 
                        CheckSaveButtonStatus();
                        GlobalGetSaveButtonListTrigger = e;
                    }
                     
                }
            },
            Error: function (e) {
                console.error(e);
            },
            complete: function (e) {
            }
        });
    }



    function ContinuePausedRefresh() {
        if (RefreshMode == false)
        {
            RefreshMode = true;
        }
    }

    var Continued = 0;

    $(document).ready(function () {
        var refreshDispatch =  setInterval(function () { CheckRefreshCase(); }, 3000); 
        Continued = setInterval(function () { ContinuePausedRefresh(); }, 60000);

        CheckSaveButtonStatus();
        //var statuslist = setInterval(function () { CheckSaveButtonStatus(); }, 1000);
        //sentCases = [];
        //sentCases = statuslist;

          var responseint = setInterval(function () { CheckRefreshSaveStatusList(); }, 3000);

        
    });


</script>


<script>
    var firebaseChatShow = false;
    $('.sticky').click(function () {
        $('.sticky').hide();
        $('.stickyFirebase').show();
        //$('.sticky').html('');
        //$('.sticky').html($('#firebaseChatDiv').html());
        //if (firebaseChatShow)
        //    $('#firebase_chatDiv').toggle();
        //else {
        //    var firebaseDiv = document.createElement("div");
        //    firebaseDiv.setAttribute("id", "firebase_chatDiv");
        //    firebaseChatShow = true;
        //    firebaseDiv.innerHTML = $('#firebaseChatDiv').html();
        //    $('.sticky').html(firebaseDiv);
        //}
    });
    $('.headerStickyFirebase').click(function () {
        $('.stickyFirebase').hide();
        $('.sticky').show();
    });
</script>
